<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[Comfortably Numbered]]></title>
        <description><![CDATA[My blog.]]></description>
        <link>http://hardmath123.github.io</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Thu, 04 Dec 2014 00:30:49 GMT</lastBuildDate>
        <author><![CDATA[Hardmath123]]></author>
        <language><![CDATA[en]]></language>
        <item>
            <title><![CDATA[It's not socket science: Part I]]></title>
            <description><![CDATA[A hands-on introduction to networking.

<p>I like protocols. The Internet is like being in a party, and trying to have a
conversation with the person across the room by passing post-it notes. Except
you can only fit a couple of words onto a post-it note (of which you have, of
course, a limited supply). And people take as long as they want to pass along
the note. Or they could just forget about it. Some of them might read the
notes, others may replace your notes with their own. And the person across the
room only speaks Finnish.</p>
<p>Despite these hostile conditions, the Internet works. It works because we have
protocols—rules that computers in a network obey so that they can all get
along.</p>
<p>And you can understand these protocols. It’s not rocket science: it’s socket
science! (I promise that was the only pun in this post.)</p>
<p>Protocols fit onto other protocols. The lowest-level protocol you should really
care about is TCP: the Transmission Control Protocol. TCP handles taking a
large message, dividing it among many post-it notes, and then reassembling the
message at the other end. If some notes get lost along the way, TCP sends
replacements. Each post-it is called a “packet”.</p>
<p>Of course, TCP fits on top of another protocol, the Internet Protocol (IP, as
in IP Address), which handles even messier things like ensuring a packet gets
passed on from its source to its destination. There are other protocols that
live on IP: UDP is like TCP, except it doesn’t care whether packets get there.
If you’re writing a video conferencing service, you don’t need to ensure that
each packet makes it, because they’ll be out of date. So you use UDP.</p>
<p>TCP is handled at the kernel level, so when you send out a message, it’s
wrapped in TCP automatically. In fact, you need administrator privileges on
UNIX to send out “raw” packets (there are occasionally reasons to do this).</p>
<p>To create a TCP connection, we use <em>sockets</em>. Most languages provide socket
bindings: I’ll use Python’s API (which is very similar to C’s), but Node.js’s
<code>net</code> module does the same thing.</p>
<p>A quick way to get a socket working is to use <code>netcat</code> (it’s called <code>nc</code> on
most UNIX shells). There’s also <code>telnet</code>, but telnet listens for its own
protocol (for instance, if your connection sends a specific string, <code>telnet</code>
will automatically send back your screen width).</p>
<p>Alternatively, you can use <code>ncat</code>, which comes bundled with <code>nmap</code>. I prefer
<code>ncat</code>; I’ll explain why in a little bit. This command-line utility is pretty
much a UNIX stream that sends out stdin by TCP, and writes incoming messages to
stdout.</p>
<p>Once you have TCP working, you can do all sorts of stuff, because now message
length and integrity has been abstracted away. For example, you explore the web
by abiding by the HyperText Transfer Protocol (HTTP, as in <a href="http://something">http://something</a>).</p>
<p>In fact, it’s worth trying right now. HTTP has the concept of a “request” and a
“response”. HTTP requests look sort of like <code>GET /index.html HTTP/1.1</code>. GET is
the “method”, you can also POST, PUT, or DELETE (or even
<a href="http://en.wikipedia.org/wiki/Hyper_Text_Coffee_Pot_Control_Protocol">BREW</a>).</p>
<p><code>/index.html</code> is the path (the stuff you would type after <code>www.google.com</code> in
the address bar), and <code>HTTP/1.1</code> is the protocol (you could, in theory, have
another protocol running—HTTP 2.0 is being drafted as I write this).</p>
<p>Let’s do it. Open up a shell and try <code>nc google.com 80</code>. You’re now connected
to Google. Try sending it <code>GET /index.html HTTP/1.1</code>. You’ll need to hit
“enter” <em>twice</em> (it’s part of the protocol!).</p>
<p>You’ll be greeted by a huge mess of symbols, which is the HTML code that makes
up the Google homepage. Note that the connection doesn’t close, so you can send
another request if you want. In fact, let’s do that: if you only want to check
out the protocol, you can send a <code>HEAD</code> request, which is identical to <code>GET</code>
except it doesn’t send back an actual message. In the real world, <code>HEAD</code> is
useful to efficiently check if a file exists on a server. If you try <code>HEAD
/index.html HTTP/1.1</code>, you get:</p>
<pre><code>HTTP/1.1 200 OK
Date: Sat, 29 Nov 2014 19:40:02 GMT
Expires: -1
Cache-Control: private, max-age=0
Content-Type: text/html; charset=ISO-8859-1
Set-Cookie: PREF=ID=67a496862b9f3c29:FF=0:TM=1417290002:LM=1417290002:S=8UjQDBRWYSa1y9tA; expires=Mon, 28-Nov-2016 19:40:02 GMT; path=/; domain=.google.com
Set-Cookie: NID=67=NnwRLRx4JVz-x3lWFTSxzV_ZxLi_TLVmbw8oDifyhzT2iuWwQ0mVveS15bE8jI28kI-p8cMIEXmmwDmwlxojTY07azz6XzcmeRD7mHerDLuVjPwjV180AxNqWBHqJrfp; expires=Sun, 31-May-2015 19:40:02 GMT; path=/; domain=.google.com; HttpOnly
P3P: CP=&quot;This is not a P3P policy! See http://www.google.com/support/accounts/bin/answer.py?hl=en&amp;answer=151657 for more info.&quot;
Server: gws
X-XSS-Protection: 1; mode=block
X-Frame-Options: SAMEORIGIN
Alternate-Protocol: 80:quic,p=0.02
Transfer-Encoding: chunked
</code></pre><p>This looks messy, but it really isn’t. You can see how the protocol works: you
start with the protocol name and <code>200 OK</code>, which is the <em>response code</em>. You
are probably familiar with another response code, <code>404 NOT FOUND</code>.</p>
<p>Then each line begins with some header, a colon, and then information. For
instance, you get the date, you get the content type (<code>text/html</code>), etc.</p>
<p>The Cookie headers instruct the browser to save those values in a local file.
When the web browser sends further requests, the protocol instructs it to send
the saved cookies as a part of the request. This lets websites track you—and
is the reason Gmail keeps you logged in even when you close the window.</p>
<p>So far, so good. One thing that may have bothered you was the <code>80</code> you typed
as an argument for <code>nc</code>. That’s the <em>port number</em>. The idea is that a computer
can serve multiple websites by having multiple active sockets. To allow this,
TCP has a port argument: your computer has 65,536 ports and it delivers packets
to the right one.</p>
<p>As I said, <code>ncat</code> comes bundled with <code>nmap</code>. <code>nmap</code> is a <em>port scanner</em>, a
script that checks every port of a computer to see if anything is listening
(this is one of those places where raw sockets make things much more
efficient). Running port scans lets an attacker find vulnerable programs
running, and then exploit them (for instance, test servers or outdated services
that have known security issues are easy targets).</p>
<p>Don’t run port scans on computers you don’t own. <code>nmap</code> is designed to be used
by professional network security people, who keep huge sites like Google up and
running safely.</p>
<p><code>80</code> is the conventional port for HTTP, but you can serve a website on any
port. To access it from a web browser, you append the port after the domain
name, like <code>http://example.com:81/index.html</code>.</p>
<p>The other thing that may have bothered you was how the computer know who
<code>google.com</code> was. The answer to that is another protocol: the DNS protocol,
which is used to ask a DNS server to resolve a domain name (like Google.com)
into an IP address. You can try this with the <code>host</code> command:</p>
<pre><code>$ host google.com
google.com has address 74.125.239.135
google.com has address 74.125.239.129
google.com has address 74.125.239.134
google.com has address 74.125.239.131
google.com has address 74.125.239.133
google.com has address 74.125.239.142
google.com has address 74.125.239.128
google.com has address 74.125.239.137
google.com has address 74.125.239.136
google.com has address 74.125.239.130
google.com has address 74.125.239.132
google.com has IPv6 address 2607:f8b0:4005:800::1009
google.com mail is handled by 30 alt2.aspmx.l.google.com.
google.com mail is handled by 40 alt3.aspmx.l.google.com.
google.com mail is handled by 10 aspmx.l.google.com.
google.com mail is handled by 20 alt1.aspmx.l.google.com.
google.com mail is handled by 50 alt4.aspmx.l.google.com.
</code></pre><p>Once you choose an IP address, the protocol lets you track down that computer
and establish a connection.</p>
<p>Now, you’re often told to always use HTTPS, because it’s secure. You can
probably already tell how insecure HTTP is: any guest at the party can read
your post-it packets and know everything.</p>
<p>A fun thing to try is to run <code>tcpdump</code>: it’ll dump packets from your computer
as they’re sent out or received (you may like the <code>-X</code> option). Mess around
with the options a bit, and you can read the raw contents of HTTP packets as
you surf the web. You’ll need to be an administrator to run it, but if you
think about it, that’s probably a good thing.</p>
<p>Anyhow, back to HTTPS: it’s just HTTP, except sitting on top of another
protocol called SSL (or TLS—it’s sort of complicated). SSL handles finding an
encryption that both you and your connection agree is secure, negotiating a
shared secret key, and then sending encrypted messages. It also lets you
authenticate people by passing around certificates that are cryptographically
signed by authorities.</p>
<p>HTTPS runs on port 443, which is the other default port that your browser
doesn’t need to be told. You can try the above HTTP fun on port 443: most
websites will get mad at you and kill the connection.</p>
<p>This is the reason I like <code>ncat</code>: the <code>--ssl</code> option wraps your connection in
the SSL negotiations and encrypts what you send (you can’t viably do this
manually). Try <code>ncat --ssl google.com 443</code>: things should work as normal now,
but <code>tcpdump</code> will show you gibberish.</p>
<p>At this point we’ve foiled almost all the hurdles in our initial party analogy,
so I’m going to take a break.</p>
<p>In Part II of this series, we’ll explore some more protocols and write clients
using Python. We’ll talk about how protocols are established, and why it’s
important that it works the way it does right now.</p>
<p>In Part III, we’ll explore four recent showstopper exploits, all of which make
plenty of sense once you understand protocols: Goto Fail, Heartbleed,
Shellshock, and POODLE.</p>
]]></description>
            <link>http://hardmath123.github.io/socket-science.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/socket-science.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Sat, 29 Nov 2014 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Notes on Binary Strings]]></title>
            <description><![CDATA[A memory dump of useful functions

<p>One of the things I had to do for PicoCTF was learn how to wrangle binary
strings in various languages. The idea is that you think of a string as an
array of numbers instead of an array of characters. It’s only coincidental that
some of those numbers have alternate representations, such as “A”. The
alphabet-number correspondence is an established table. Look up
<a href="http://wikipedia.org/wiki/ASCII">ASCII</a>.</p>
<p>Each number is a byte (aka an <code>unsigned char</code>), so it ranges from 0 to 255.
This means it’s convenient to express them in hex notation—each number is two
hex digits, so <code>0xff</code> is 256.</p>
<p>Using this, we can turn strings into hex sequences (by doubling the number of
printed characters), and then turn the hex sequence into a decimal number. This
is great for crypto, because many algorithms (including RSA) can encrypt a
single number.</p>
<p>We can also use <a href="http://en.wikipedia.org/wiki/Base64">base64</a> scheme to turn
binary strings into printable strings. It uses case-sensitive alphabet (52),
numbers (10), <code>+</code>, and <code>/</code> (2) as the 64 symbols. Each set of three bytes is
represented by four base64 symbols. Note that this means we need to pad the
string if it isn’t a multiple of 3 bytes. The padding is indicated with <code>=</code> or
<code>==</code> at the end of the encoded message.</p>
<p>This post summarizes some really useful functions for working with binary
strings.</p>
<h3 id="python">Python</h3>
<p>You can use hexadecimal literals in Python strings with a <code>\x</code> escape code:</p>
<pre><code class="lang-python">s = &#39;\x63\x6f\x77&#39;
</code></pre>
<p>To get this representation of a string that’s already in memory, use <code>repr</code>. It
will turn unprintable characters into their escape codes (though it will prefer
abbreviations like <code>\n</code> over hex if possible).</p>
<p>You can use <code>ord</code> to turn a character into a number, so <code>ord(&#39;x&#39;) == 120</code> (in
decimal! It’s equal to <code>0x78</code>). The opposite function is <code>chr</code>, which turns a
number into a character, so <code>chr(120) == &#39;x&#39;</code>. Python allows hex literals, so
you can also directly say <code>chr(0x78) == &#39;x&#39;</code>.</p>
<p>To convert a number to a hex string, use the (guesses, anyone?) <code>hex</code> function.
To go the other way, use <code>int(hex_number, 16)</code>:</p>
<pre><code class="lang-python">hex(3735928559) == &#39;0xdeadbeef&#39;
int(&#39;deadbeef&#39;, 16) == 3735928559
</code></pre>
<p>To convert a string to or from hex, use <code>str.encode</code> and <code>str.decode</code>:</p>
<pre><code class="lang-python">&gt;&gt;&gt; &#39;cow&#39;.encode(&#39;hex&#39;)
&#39;636f77&#39;
&gt;&gt;&gt; &#39;636f77&#39;.decode(&#39;hex&#39;)
&#39;cow&#39;
</code></pre>
<p>The pattern <code>hex(number).decode(&#39;hex&#39;)</code> is quite common (for example, in RSA
problems). Keep in mind that you need to strip the leading <code>0x</code> and possibly a
trailing <code>L</code> from the output of <code>hex</code>, and also make sure to pad with a leading
<code>0</code> if there are an odd number of characters.</p>
<p>Finally, Python handles base64 with the <code>base64</code> module, but you can also just
use <code>str.encode(&#39;base64&#39;)</code> and <code>str.decode(&#39;base64&#39;)</code>. Keep in mind that it
tacks on trailing <code>\n</code>s. I don’t know why.</p>
<h3 id="javascript">JavaScript</h3>
<p>JavaScript is pretty similar. It supports <code>\x12</code> notation, and <code>0x123</code> hex
literals. The equivalent of <code>ord</code> and <code>chr</code> are <code>&quot;a&quot;.charCodeAt(0)</code> and
<code>String.fromCharCode(12)</code>, respectively.</p>
<p>You can convert a hex string to decimal with <code>parseInt(hex_string, 16)</code>, and go
the other way with <code>a_number.toString(16)</code>:</p>
<pre><code class="lang-javascript">parseInt(&quot;deadbeef&quot;, 16) == 3735928559
3735928559.toString(16) == &#39;deadbeef&#39;
</code></pre>
<p>Note the lack of <code>0x</code>.</p>
<p>Unfortunately, there isn’t a built-in string to hex string encoding or decoding
built into JavaScript, but it isn’t too hard to do on your own with some clever
Regexes. The tricky part is knowing when to pad.</p>
<p>Browser JS has <code>atob</code> and <code>btoa</code> for base64 conversions (read them as
“ascii-to-binary” and “binary-to-ascii”). You can install both of those as
Node modules from npm: <code>npm install atob btoa</code>.</p>
<h3 id="bash">Bash</h3>
<p>For the sake of completeness, I wanted to mention how to use Bash to input
binary strings to programs. Use the <code>-e</code> flag to parse hex-escaping in string
literals, and <code>-n</code> to suppress the trailing <code>\n</code> (both of these are useful to
feed a binary a malformed string):</p>
<pre><code class="lang-bash">$ echo &quot;abc\x78&quot;
abc\x78
$ echo -e &quot;abc\x78&quot;
abcx
$ echo -ne &quot;abc\x78&quot;
abcx$ # the newline was suppressed so the prompt ran over
</code></pre>
<p>Alternatively, <code>printf</code> does pretty much the same thing as <code>echo -ne</code>.</p>
<p>Sometimes you want to be able to write more data after that, but the binary is
using <code>read()</code>. In those cases, it’s helpful to use <code>sleep</code> to fool <code>read</code> into
thinking you finished typing:</p>
<pre><code class="lang-bash">{ printf &quot;bad_input_1\x00 mwahaha&quot;;
                     #  the zero char signals end-of-string
                     #  in C, which can be used to wreak all
                     #  sorts of havoc. :)
    sleep 0.1;
    printf &quot;bad_input_2&quot;;
    sleep 0.1;
    cat -; # arbitrary input once we have shell or something
} | something
</code></pre>
<p>Or, if you’re intrepid, you can use Python’s <code>subprocess</code> or Node’s
<code>child_process</code> to pipe input to the binary manually.</p>
<p>UNIX comes with the <code>base64</code> command to encode the standard input. You can use
<code>base64 -D</code> to decode.</p>
<h3 id="parting-tips">Parting tips</h3>
<p>Use <code>hex</code> when your binary string is a giant number, and use <code>base64</code> when
you’re simply turning a binary string into a printable one.</p>
<p>Use <code>wc -c</code> to get the character count of a binary file.</p>
<p>Use <code>strings</code> to extract printable strings from a binary file, though ideally
<a href="https://sourceware.org/bugzilla/show_bug.cgi?id=17512">not on trusted files</a>.</p>
<p>Finally, use <code>od</code> or <code>xxd</code> to pretty-print binary strings along with their hex
and plaintext representations.</p>
]]></description>
            <link>http://hardmath123.github.io/binarystrings.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/binarystrings.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Thu, 13 Nov 2014 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Some PicoCTF Writeups]]></title>
            <description><![CDATA[In honor of PicoCTF, I wrote this post in pico.

<p>Almost any metric of work I’ve done—homework submitted, emails answered, hours spent playing piano, number of Github commits—show a sharp drop in the past two weeks. I pretty much spent every moment on a computer solving <a href="http://picoctf.com">PicoCTF</a> problems.</p>
<p>Pico was wonderful. It was an opportunity to do stuff I couldn’t (legally) do before, and learn stuff that many adults would hesitate to teach teenagers. I also got to hang out with cool hackers on their IRC channel, and had an excuse to stay up till 2am hacking.</p>
<p>I’m planning on putting up some quick writeups of the problems I loved. If you haven’t spent an hour or so with these problems, you won’t have any clue what I’m talking about (and chances are that I myself won’t grok any of this a year from now). Nevertheless, here goes.</p>
<h3 id="obo">OBO</h3>
<p>This problem caused too many people too many hours of pain.</p>
<p>The basic idea is that the programmer used <code>&lt;=</code> instead of <code>&lt;</code> wherever he was iterating, so he has lots of off-by-one errors. In particular, when populating his hex table, he has:</p>
<pre><code class="lang-c">for (i = 0; i &lt;= 6; ++i) {
    hex_table[&#39;a&#39; + i] = 10 + i;
}
</code></pre>
<p>This allows <code>g</code> to be a valid hex character. Yay.</p>
<p>Now he goes around checking whether or not all the password characters are hex, and he tries to make sure that all hex chars are used at least once by populating the array <code>digits</code>. But we can input <code>g</code> in the password, so we can set <code>digits[16]</code> which overflows into <code>password</code>:</p>
<pre><code class="lang-c">int digits[16] = {0};
char password[64];
</code></pre>
<p>So far, so good. A <code>char</code> is one byte, and an <code>int</code> (on this setup) is 4 bytes. So when we overflow an <code>int</code> onto <code>password</code>, we set the first four characters of the array to <code>\x01\x00\x00\x00</code> (the bytes are reversed because Endianness!). With that zero byte, we’ve effectively reset <code>password</code> to <code>\x01</code>. So now we can input <code>\x01</code> as the confirmation and cheat the password changer. Yay again.</p>
<p>Now what? It uses <code>system()</code> to call a Python script. Yuck. On the bright side, it uses a relative file path for the Python file (the author probably didn’t test it in another working directory). So we simply <code>cd</code> into our home directory and make a new Python script with the same name, with contents:</p>
<pre><code class="lang-python">print open(&#39;/home/obo/flag.txt&#39;).read()
</code></pre>
<p>When we send OBO the overflowed password, it runs this with the right privs and we win.</p>
<h3 id="make-a-face">Make a Face</h3>
<p>This was my favorite challenge (I have a thing for web exploitation). My first reaction was “CGI! Shell! This must be Shellshock!” Turns out they’ve patched their Bash, though, so that didn’t work.</p>
<p>The legitimate solution relies on the fact that Perl’s <code>open()</code> is unsafe: you can call it with a <code>|</code> at the end, and it <em>evaluates the argument in a shell</em>, sending back the result.</p>
<p>The webpage essentially asks the server to open the file <code>{body part type}{index}</code>, where <code>body part type</code> is one of <code>head</code>, <code>nose</code>, etc. and <code>index</code> looks like <code>1.bmp</code>. So, of course, we can cheat by sending it <code>1.bmp; ls|</code> and instead of a bitmap file, the server gets a directory listing.</p>
<p>This is pretty easy to try out with <code>curl</code>…but we get back gibberish. It looks like there’s some bitwise melding going on on the server that combines the images. This dies when it gets <code>ls</code> output. So we just send <em>all</em> the body part parameters the same bad index. It bitwise <code>&amp;</code>s them together (i.e. nothing happens) and we get the secret. Simple but beautiful.</p>
<h3 id="steve-s-list">Steve’s List</h3>
<p>This was my other favorite challenge, because there were so many different things you needed to simultaneously break to get shell. Also, I just love the way they used CSS3 polyfills to make the <code>blink</code> tag work in non-ancient browsers.</p>
<p>First, there’s the cookie signing. Steve, in all his wisdom, is authenticating cookies by maintaining a SHA1 signature of the cookie plus some secret nonce. Turns out, this is pretty insecure because of a simple padding message-extension hack. A quick Google search sends us <a href="http://journal.batard.info/post/2011/03/04/exploiting-sha-1-signed-messages">this blog post</a>, and they post some sample Python that gets the job done.</p>
<p>Though I recommend reading the blog post to actually understand what’s going on, the basic idea is that a SHA1 hash operates on an arbitrary number of blocks. The state of the algorithm at the end of one block is the input to the next block’s hash (the input to the first block’s hash is a well-known constant).</p>
<p>You don’t need to know the contents of the previous block to add another block. So we manually pad the payload we have (that is, the cookie) and tack on our own block. We can initialize the SHA state with the (known) hash of the first block and then compute valid subsequent hashes without ever knowing the key. Some quick modifications to the Python script given above let us forge arbitrarily long messages.</p>
<p>And now for something completely different. The server reads each line of the cookie, and unpacks it using PHP’s <code>unserialize</code>:</p>
<pre><code class="lang-php">$settings_array = explode(&quot;\n&quot;, $custom_settings);
$custom_settings = array();
for ($i = 0; $i &lt; count($settings_array); $i++) {
    $setting = $settings_array[$i];
    $setting = unserialize($setting);
    $custom_settings[] = $setting;
}
</code></pre>
<p>With forged objects, we can make it instantiate arbitrary objects at will—PHP’s serialization saves type information. Notice that the <code>Post</code> object defines:</p>
<pre><code class="lang-php">function __destruct() {
    // debugging stuff
    $s = &quot;&lt;!-- POST &quot; . htmlspecialchars($this-&gt;title);
    $text = htmlspecialchars($this-&gt;text);
    foreach ($this-&gt;filters as $filter)
        $text = $filter-&gt;filter($text);
    $s = $s . &quot;: &quot; . $text;
    $s = $s . &quot; --&gt;&quot;;
    echo $s;
}
</code></pre>
<p>So it will dump its contents in an HTML comment for debugging when it’s destroyed by the GC. Since we can instantiate arbitrary <code>Post</code> objects, we can get their contents printed out at will. We’re very close now.</p>
<p>We can also create <code>Filter</code>s that act on the <code>Post</code>s. <code>Filter</code>s use PHP’s <code>preg_replace</code>. That’s insecure, because you can use the <code>e</code> flag to <em>evaluate arbitrary code</em> based on the replacement text generated from regex captures. Argh.</p>
<p>At this point, it was around 2am, my hands felt like rubber, and my eyes felt like mozzerella balls. So I just copied <code>posts/steve.txt</code>, and modified one of the filters to dump the contents of the flag, and went to sleep in peace.</p>
<p>There are several lessons to be learned here, but the most important are:</p>
<ol>
<li>Don’t roll your own crypto.</li>
<li>If you do, don’t use PHP.</li>
<li>If you do, read the docs.</li>
</ol>
<h3 id="block">Block</h3>
<p>Block uses a Substitution Permutation Network to encrypt the string—but it does it twice. I pretty much brute-forced this one. But I did it tastefully, so it merits a writeuplet.</p>
<p>We know that the message begins with <code>message:&lt;space&gt;</code>, and we know the first 9 bytes of the output. This lets us mount a known-plaintext attack. Here’s how: we encrypt the plaintext with <em>all</em> possible keys (there are ($2^{24}=16777216$) of them) and we <em>decrypt</em> the ciphertext with all possible keys. Turns out that for the correct pair of keys, we’ll get the exact same result (the intermediate encryption). This is a ‘meet-in-the-middle’ attack (not to be confused with ‘man-in-the-middle’ or ‘Malcolm-in-the-Middle’), and can be read about <a href="http://en.wikipedia.org/wiki/Meet-in-the-middle_attack">on Wikipedia</a>. This is good—now all we need to do is find the intersection of two massive lists.</p>
<p>Once I’d compiled these lists manually (it took over an hour), I realized that I would be graduating high school by the time a naive Python intersection search finished. Fortunately, Python’s <code>set</code> type has ridiculously fast member-checking, so it took all of 5 minutes to find the keypair, and I was done.</p>
<hr>
<p>That’s all for now. I’ll probably write a couple more, depending on the amount of homework I need to make up this week&hellip;</p>
]]></description>
            <link>http://hardmath123.github.io/pico.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/pico.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Sat, 08 Nov 2014 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Better Earley then never]]></title>
            <description><![CDATA[An informal explanation of Earley parsing.

<p>I wrote <a href="http://github.com/Hardmath123/nearley">nearley</a> working on course materials for a Berkeley CS course, but it quickly spiralled into a pretty big project. Perhaps more than parsing, I learned how to manage an open-source project with multiple contributors, and how to take concepts written in math-heavy notation and convert them to ideas (and code!).</p>
<p>There aren’t many tutorials about Earley parsing, because Earley parsing has been shadowed by the recursive descent or lookahead parsers that everyone uses. (The only significant Earley project out there is Marpa; I got some help from Marpa’s creator, Jefferey Kegler.) But Earley parsers are awesome, because they will parse <em>anything</em> you give them. Depending on the algorithm specified, popular parsers such as lex/yacc, flex/bison, Jison, PEGjs, and Antlr will break depending on the grammar you give it. And by break, I mean infinite loops caused by left recursion, crashes, or stubborn refusals to compile because of a “shift-reduce error”.</p>
<p>Here’s my mini-tutorial that explains Earley parsing, with an emphasis on de-emphasizing notation. It’s adapted from a file that used to live in the git repo for nearley.</p>
<h3 id="primer-backus-naur-form">Primer: Backus-Naur Form</h3>
<p>The Earley algorithm parses a string (or any other form of a stream of tokens) based on a grammar in Backus-Naur Form. A BNF grammar consists of a set of <strong>production rules</strong>, which are expansions of <strong>nonterminals</strong>. This is best illustrated with an example:</p>
<pre><code>expression -&gt;
    number # a number is a valid expression
    | expression &quot;+&quot; expression # sum
    | expression &quot;-&quot; expression # difference
    | &quot;(&quot; expression &quot;)&quot; # parenthesization

number -&gt; &quot;1&quot; | &quot;2&quot; # for simplicity&#39;s sake, there are only 2 numbers
</code></pre><p>This small language would let you write programs such as <code>(1+2+1+2)-1-2-1</code>. <code>expression</code> and <code>number</code> are <em>nonterminals</em>, and <code>&quot;+&quot;</code> and <code>&quot;-&quot;</code> are <em>literals</em>. The literals and nonterminals together are <strong>tokens</strong>.</p>
<p>The <strong>production rules</strong> followed the <code>-&gt;</code>s. The <code>|</code>s delimited different expansions. Thus, we could have written</p>
<pre><code>number -&gt; &quot;1&quot;
number -&gt; &quot;2&quot;
</code></pre><p>and it would be an identical grammar.</p>
<p>For the rest of this guide, we use the following simple, recursive grammar:</p>
<pre><code>E -&gt; &quot;(&quot; E &quot;)&quot;
   | null
</code></pre><p>this matches an arbitrary number of balanced parentheses: <code>()</code>, <code>(())</code>, etc. It also matches the empty string ``. Keep in mind that for a parsing algorithm, this is already very powerful, because you cannot write a regular expression for this example.</p>
<h3 id="algorithm">Algorithm</h3>
<p>Earley works by producing a table of partial parsings.</p>
<p>(Warning: some notation is about to ensue.)</p>
<p>The nth column of the table contains all possible ways to parse <code>s[:n]</code>, the first <em>n</em> characters of <em>s</em>. Each parsing is represented by the relevant production rule, and a <strong>marker</strong> denoting how far we have parsed. This is represented with a dot <code>•</code> character placed after the last parsed token.</p>
<p>Consider the parsing of ths string <code>()</code> with the grammar <code>E</code> above. Column 0 of the table looks like:</p>
<pre><code># COL 0
1. E -&gt; • &quot;(&quot; E &quot;)&quot;
2. E -&gt; • null
</code></pre><p>which indicates that we are expecting either of those two sequences.</p>
<p>We now proceed to process each entry (in order) as follows:</p>
<ol>
<li>If the next token (the token after the marker <code>•</code>) is <code>null</code>, insert a new entry, which is identical excpept that the marker is incremented. (The <code>null</code> token doesn’t matter.) Then re-process according to these rules.</li>
<li>If the next token is a nonterminal, insert a new entry, which expects this nonterminal.</li>
<li>If there is no expected token (that is, the marker is all the way at the end), then we have parsed the nonterminal completely. Thus, find the rule that expected this nonterminal (as a result of rule 1), and increment its marker.</li>
</ol>
<h3 id="example-">Example!</h3>
<p>Following this procedure for Column 0, we have:</p>
<pre><code># COL 0 [processed]
1. E -&gt; • &quot;(&quot; E &quot;)&quot;
2. E -&gt; • null
3. E -&gt; null •
</code></pre><p>Now, we consume a character from our string. The first character is <code>&quot;(&quot;</code>. We bring forward any entry in the previous column that expects this character, incrementing the marker. In this case, it is only the first entry of column 0. Thus, we have:</p>
<pre><code># COL 1, consuming &quot;(&quot;
1. E -&gt; &quot;(&quot; • E &quot;)&quot; [from col 0 entry 1]
</code></pre><p>Processing, we have (you can read the comments top-to-bottom to get an idea of how the execution works):</p>
<pre><code># COL 1

# brought from consuming a &quot;(&quot;
1. E -&gt; &quot;(&quot; • E &quot;)&quot; [from col 0 entry 1]

# copy the relevant rules for the E expected by
# the first entry
2. E -&gt; • &quot;(&quot; E &quot;)&quot; [from col 1 entry 1]
3. E -&gt; • null [from col 1 entry 1]

# increment the null rule
4. E -&gt; null • [from col 1 entry 3]

# entry 4 is completed, so we increment entry 1
5. E -&gt; &quot;(&quot; E • &quot;)&quot; [from col 0 entry 1]
</code></pre><p>Notice how we must keep track of where each entry was added so that we know which entry to increment when it is completed.</p>
<p>Next, we consume a <code>&quot;)&quot;</code>, the second (and last) character of our string. We have:</p>
<pre><code># COL 2, consuming &quot;)&quot;

# brought from consuming a &quot;)&quot;
1. E -&gt; &quot;(&quot; E &quot;)&quot; • [from col 0 entry 1]
</code></pre><p>Nothing further can be done, so the parsing is complete. We now find entries that are complete and created from an entry in column 0. (That means we have a parsing from the beginning of the string to the end). Since we have such an entry in column 2, this represents the parsing.</p>
<h3 id="finale">Finale</h3>
<p>Nearley parses using the above algorithm, but giving each entry “baggage”, namely the parsed data as a tree structure. When we finish an entry (and are about to process it with rule 3), we apply the postprocessor function to the baggage. Once we determine a parsing, we can reveal—with a flourish—the postprocessed data to be used by the user.</p>
<h3 id="parting-words">Parting words</h3>
<p>If we had multiple entries that worked in the end, there would be multiple parsings of the grammar. This means the grammar is <strong>ambiguous</strong>, and this is generally a very bad sign. It can lead to messy programming bugs, or exponentially slow parsing.</p>
<p>It is analogous to the confusion generated when one says</p>
<blockquote>
<p>I’m really worried Christopher Nolan will kill a man dressed like a bat in his next movie. (The man will be dressed like a bat, I mean. Christopher Nolan won’t be, probably.)</p>
</blockquote>
]]></description>
            <link>http://hardmath123.github.io/earley.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/earley.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Sat, 25 Oct 2014 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Detech Your Classroom]]></title>
            <description><![CDATA[Technology isn't helping.

<p>I go to a tech-savvy school. And it’s getting out of hand.</p>
<p>On a daily basis, I navigate through several websites just to <em>find</em> my homework. <strong>Schoology</strong> tells me the assignment and due date. Then I head over to the teacher’s <strong>Google Site</strong> (almost every teacher maintains a class website). I need to complete sets of flashcards on <strong>Quizlet</strong>, make a project on <strong>Glogster</strong>, record my French on <strong>Audacity</strong> and post it to <strong>Dropbox</strong> (or, in one case, <strong>YouTube</strong> and print out a <strong>QR code</strong> that links there). I have to fill out final exams on <strong>Google Forms</strong>. I need to use <strong>SmartMusic</strong> to record my piano-playing.</p>
<p>I check my grades on <strong>Infinite Campus</strong>, except for Chemistry, where my teacher has a <em>hand-coded</em> webpage (it uses frames and contains the tag <code>&lt;SCRIPT LANGUAGE=&quot;Javascript&quot;&gt;&lt;!--...//--&gt;</code>). One of my classes runs on <strong>ClassroomDojo</strong>, which is essentially the Karma system applied to class participation, and directly linked to grading.</p>
<p><strong>Geddit</strong> wants each student to have an iPad, enabling teachers (for the first time in history!) to ask the entire class a question and see who can find the answer. Their website’s testimonial from a 9th grader is “Geddit, is like, totally private. So I can let my teacher know how I’m doing without, like, anyone else knowing.” English essays get turned into <strong>Turnitin</strong>, which checks them against a large database and informs us that most of them are liberally plagiarized, since we quoted Orwell. I’ve had to learn math on <strong>Mindspark</strong>; my fellow sixth graders could figure out how to crack the site (hint: they don’t sanitize HTML).</p>
<p>Our teachers all have ‘Smart boards’, which are essentially things that project onto whiteboards, except you can’t write on them with normal markers without being yelled at. And the projecters take half the period to start working, and then they do, they’re tempramental at best. If the teacher remembers to bring the cable.</p>
<p>Almost every class uses <strong>Scantrons</strong>, though the net increase in mis-bubbling, mis-grading, and overall stress made me realize that it might actually be less work for teachers to just check circled answers on a printout. I never liked multiple-choice tests, because it almost never tests the right things. It takes a far deeper understanding of science, history, a language, or math to write a coherent sentence. It’s also harder to cheat.</p>
<p>And that’s just the technology <em>I</em> deal with. There’s <strong>NoRedInk</strong>, which tries to teach you grammar. There’s <strong>Understoodit</strong>, which tries to eliminate hand-raising (is the problem <em>really</em> that students are too embarrassed to raise their hands? I doubt it.). And then there are the various counterparts that each of these apps has.</p>
<p>All I needed for my CS class was a terminal…</p>
<hr>
<p>Sure, I understand that teachers want to use technology to promote learning. But there’s a difference between using technology, and shoving technology into an otherwise functional classroom. Most of these new ‘classroom technologies’ <em>don’t</em> teach us French. They teach us how to tolerate a badly-coded website. Technology is all about picking (or building) tools to make life easier. It’s about automation. Just because it appears on a screen doesn’t mean that it’s making life easier. Is writing a “blog entry post” or “E-mail to your teacher” instead of a paragraph or letter really that much more exciting?</p>
<p>As an analogy (because I don’t have too many of those already), it’s like telling a kid to use more special effects in their PowerPoint presentation. He’s learning the <em>opposite</em> of what he should. He’s going to end up as one of those people with red-text-on-a-blue-background, and five minute long slide transitions, and animations with Wile E. Coyote noises, because that’s what pleases the teacher.</p>
<p>But you <em>want</em> to teach him how to make a presentation that appeals to people and conveys information. Hopefully.</p>
<p>Similarly, technology at a classroom isn’t going to teach children what you want them to learn. It’s going to tell them to rapidly adopt any new technology without considering whether it’s needed. It’s going to tell them that the existence of technology makes things more impressive. It sends out a false message that they’re ‘computer whizzes’.</p>
<p>It isn’t going to teach them to choose tools wisely. To be careful with how you invest your time. To assess whether the software is really helping you or not. And it’s <em>certainly</em> not going to teach them any computer science. Contrary to popular opinion, not all kids are tech savants. Not all kids even <em>have</em> the resources. I don’t own a smartphone; I can’t efficiently scan a QR code at home.</p>
<p>The truth is that every student needs to learn by interacting with a learned instructor. Technology distances us from teachers. I will learn a lot more if I’m being assessed by a human. A computer can instantly give me the percent of questions I answered correctly, but I honestly don’t care. Start-ups that offer these services are, at the deepest level, businesses who don’t really have much interest in improving education (if they did, they would be doing a better job!). Stockholders aren’t in the classrooms.</p>
<p>Yes, there’s an education crisis (and yes, there has <em>always</em> been an education crisis), but the solution is not to monkey-patch it by thinking technology is smarter. The solution is to make sure teachers, not technology, interface with students.</p>
<p>I think I’m going to go write a script to poll my chem grades and email me when they’re updated.</p>
<p>P.S. What technology <em>do</em> I approve of at school? <strong>Google Drive</strong> is wonderful for word processing for high school. <strong>Email</strong> turns out to be (surprise, surprise) really useful. <strong>iCal</strong> (a.k.a. “Calendar”) is a good brain dump software. Google <strong>Keep</strong> helps manage lists and links. <strong>Feedly</strong> helps keep track of reading material. But my favorite bit of school-managing is a printout in a three-ring binder.</p>
<p>P.S.S. For nerds: <strong>Git</strong> is great to version-control big school projects. Because you’re going to mess up. <strong>LaTeX</strong> is great for reports/labs/essays/presentations (!), because typesetting means more than you think. <strong>WolframAlpha</strong> saved me in a lot of classes involving research. Oh, and it does math, too. <strong>GeoGebra</strong> turns out to be great for making diagrams and shiny demos in geometry.</p>
<p>P.S.S.S. A lot of teachers (including my (awesome) CS teacher) try to enforce submission deadlines by asking you to save a timestamped copy of your document in case you can’t submit the assignment to Turnitin. This is a <em>terrible</em> idea. As an exercise, use <code>touch -t</code> to show that this is a trivial system to beat. Then suggest a practical but reasonably secure alternative (hashes are small enough to write down on paper and bring to school).</p>
]]></description>
            <link>http://hardmath123.github.io/tech-in-education.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/tech-in-education.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Fri, 10 Oct 2014 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Bingo is Boring]]></title>
            <description><![CDATA[Memories of elementary school

<blockquote>
<p><em>I completely rewrote this story for an English assignment. Once it’s graded, I’ll updated this post with the much more exciting revised version. Maybe.</em></p>
</blockquote>
<p>“Bingo.”</p>
<p>“Yes, bingo.”</p>
<p>“Like, the—“</p>
<p>“Yes, Mr. Smiley, bingo.”</p>
<p>Back in elementary school, our favorite adult was a Mr. Smiley. He hung out with us at lunch, told jokes on rainy days, and <em>always</em> won thumb wars. I remember very little about him, but I remember him having thick, bulging veins in his arms. There was always a different explanation for how they came to be. Some involved bears. Mr. Smiley was the school custodian.</p>
<hr>
<p>“Alright, everyone, quiet down. <em>Shhh!</em> Come up—ONE BY ONE!—and get your boards.”</p>
<p>It was a rainy day. The grown-ups intended to herd us into the art room. Mrs. J (I never knew her real name, and after the third year it became too awkward to ask) was in there, with her stash of green boards. They had little red sliders across each of the 25 cells.</p>
<p>“The first one is… B-4!” Someone cried out “before what?”. This was traditional and obligatory.</p>
<p>Bingo days were the worst. It’s hard to explain the feeling a third grader has when he’s being told to quietly pretend to enjoy a game meant for people several times his age. You know that you could be drawing or talking to your friend. Or you could be out playing in the rain (an adult bursts into flames at the mere thought).</p>
<p>“N-32! Remember, I want you to have <em>all four corners</em> before you come up!”</p>
<p>And then there was the thrill of secretly communicating with people in the silence. I can still sign in Handspeak, our dialect of sign language, where you simply imitate the letters’ shapes with your fingers. Given another couple of years, I’m confident that we would have invented Morse code.</p>
<p>“O-42! That’s Oh-fooooorty-two!”</p>
<p>On top of all that, there was a distinct lack of exciting prizes. To date, the most exciting thing any of us had won was a whistle, which we were naturally forbidden from using.</p>
<hr>
<p>“That’s adorable.”</p>
<p>“It’s not adorable, Mr. Smiley.” (Third graders cower at the word.) “It’s democracy.”</p>
<p>“Yes, of course. I’ll, uh, get you those photocopies riiiight away.”</p>
<p>I remember handing over a crumpled sheet of notebook paper. On each line was the name of one of the 80 students in the third grade who agreed with us. Next to it was the name written in worse handwriting, our attempts at signatures.</p>
<p>That sheet of paper marked the culmination of six weeks of convicincing kids that Bingo Is Boring&trade;. We made lists, brainstormed alternatives (“where’s the nearest bowling alley?”), and drafted a letter to the principal. We had a president and a vice-president of the BIB&trade;. We had meetings, speeches, and debates.</p>
<p>We had opposition. We had to merge with a competing group to form the Bingo Elimination Group (BEG&trade;). Contracts were signed. As secretary, Chris handled the paperwork for me.</p>
<p>We had allies, especially the wonderfully helpful Mrs. Ayer who helpfully shot down our plan to send recon missions to the staff room.</p>
<p>We had more fun than we would ever have at recess.</p>
<p>In the long run, of course, we never did get rid of Bingo. But I don’t think that matters.</p>
<p>(A shoutout to Sardor, Ethan, and Chris. I hope I don’t need to wait till you’re all famous to find you again.)</p>
]]></description>
            <link>http://hardmath123.github.io/smiley.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/smiley.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Thu, 02 Oct 2014 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Brown M&Ms]]></title>
            <description><![CDATA[A request.

<p>David finally convinced me why we use MLA format. This is a story that involves Van Halen, and the existence of a clause in their contract that demanded a bowl full of M&amp;Ms, but no brown ones. I’ve included the story from the horse’s mouth, i.e. lead singer David Lee Roth (not the same David). All this is quoted from <a href="http://www.snopes.com/music/artists/vanhalen.asp">Snopes</a>.</p>
<blockquote>
<p>Van Halen was the first band to take huge productions into tertiary, third-level markets. We’d pull up with nine eighteen-wheeler trucks, full of gear, where the standard was three trucks, max. And there were many, many technical errors — whether it was the girders couldn’t support the weight, or the flooring would sink in, or the doors weren’t big enough to move the gear through. </p>
<p>The contract rider read like a version of the Chinese Yellow Pages because there was so much equipment, and so many human beings to make it function. So just as a little test, in the technical aspect of the rider, it would say “Article 148: There will be fifteen amperage voltage sockets at twenty-foot spaces, evenly, providing nineteen amperes…” This kind of thing. And article number 126, in the middle of nowhere, was: “There will be no brown M&amp;M’s in the backstage area, upon pain of forfeiture of the show, with full compensation.” </p>
<p>So, when I would walk backstage, if I saw a brown M&amp;M in that bowl… well, line-check the entire production. Guaranteed you’re going to arrive at a technical error. They didn’t read the contract. Guaranteed you’d run into a problem. Sometimes it would threaten to just destroy the whole show. Something like, literally, life-threatening.</p>
<p>The folks in Pueblo, Colorado, at the university, took the contract rather kinda casual. They had one of these new rubberized bouncy basketball floorings in their arena. They hadn’t read the contract, and weren’t sure, really, about the weight of this production; this thing weighed like the business end of a 747. </p>
<p>I came backstage. I found some brown M&amp;M’s, I went into full Shakespearean “What is this before me?” … you know, with the skull in one hand … and promptly trashed the dressing room. Dumped the buffet, kicked a hole in the door, twelve thousand dollars’ worth of fun. </p>
<p>The staging sank through their floor. They didn’t bother to look at the weight requirements or anything, and this sank through their new flooring and did eighty thousand dollars’ worth of damage to the arena floor. The whole thing had to be replaced. It came out in the press that I discovered brown M&amp;M’s and did eighty-five thousand dollars’ worth of damage to the backstage area. </p>
<p>Well, who am I to get in the way of a good rumor?</p>
</blockquote>
<p><img src="static/brownmnm.gif" alt="The clause"></p>
<p>Well, (the real) David figured that conforming to MLA’s restrictions was your way of proclaiming a lack of brown M&amp;Ms. If you got MLA wrong, then who knows what else you’ve messed up?</p>
<p>To be honest, I don’t care much for MLA, because whenever I’m using it, it’s because I’m doing another one of those English assignments where I feel I’m being graded on my word count. However, since David’s lecture, I’ve seen brown M&amp;Ms pop up everywhere in my life. Most notably, in the programming world.</p>
<p>There are ‘best practices’ everywhere. Almost all of them, of course, are justifiable. Don’t use GOTO because nobody will be able to follow your code. Don’t use eval because it’s a welcome mat for crackers. Don’t indent with tabs, they render differently for everyone. Anyone sharing their first Python project knows how many opinions everyone has. It’s almost discouraging, because you’re trying to implement something for fun and people are yelling at you because you didn’t cache intermediate results in a binary search tree, and so the whole thing’s too slow to be practical, and you should just give up now and spend your time one something more useful, like learning <em>[insert language here]</em>.</p>
<p>Don’t listen to those people.</p>
<p>Learning programming, or any other human endeavor, is all about implementation. You need to run into problems before you can appreciate the solutions we have devised.</p>
<p>For instance, I learned optics by writing a raytracer on my own, in seventh grade (side story: I didn’t know what vectors were, and later discovered that I had invented the cross product on my own, but mirror-imaged). In the beginning, it used to take a few hours to render a 100-by-100 image. As I found various optimizations, I incorporated them, and it got faster.</p>
<p>Would I have learned as much if the first time I showed it to someone, they told me to go implement k-D trees before they’ll give real constructive criticism? What kept me interested was implementing shiny ideas like Phong illumination (pun intended), and then optimizing them so that I could fit more tests within my lifetime. Anyone can find plenty of things wrong with my implementation. I was storing images as a JSON array of pixel values since I didn’t grok PNG.</p>
<p>Everyone has their own Brown M&amp;Ms. We’re presented so much information on a daily basis, that we need Brown M&amp;Ms to decide what matters and what doesn’t. I will probably put off an email whose subject line is misspelled. Or close a webpage with a pop-up. Or disregard pull requests that mess up whitespace. It’s <em>ok</em> to have Brown M&amp;Ms—and it’s ok for them to be as obscure as you want—but it’s not ok to foist them upon others.</p>
<p>The next time you see a newbie modify the <code>Array</code> prototype directly, <em>please</em> don’t yell at them. Take a deep breath and let it go. Someday, they will run into a namespace conflict, and that will be far more educational than your rant. It’s a favor.</p>
]]></description>
            <link>http://hardmath123.github.io/brownmnms.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/brownmnms.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Sat, 06 Sep 2014 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[GamifiEd]]></title>
            <description><![CDATA[The pitfalls of quantifying learning.

<p>I have gone to a lot of schools. I have gone to schools where you can ace an English writing test be memorizing an essay the teacher gives you, and reproducing it on the test. I have done art classes where you spend every period copying a poster into your notebook (graded on accuracy of the reproduction). I have taken computer classes where you’re encouraged to use as many font and color variations as possible, to ‘display your knowledge’, and so end up with yellow italicized comic sans on a red gradient background. My English teacher plays a vocabulary game, where the first person to miss a word has to bring in a snack the next day. I’m currently in a French class that uses a Reddit-esque Karma system to monitor class participation, which is directly translated to a letter grade.</p>
<p>What do all these things have in common?</p>
<p>All these schools are trying to solve the same problem: how do you quantify learning? A district needs to know how well a school is doing (hence standardized tests), a school needs to know how well a teacher is doing, and a teacher needs to report a quantitative measure of how well a student is doing.</p>
<p>Of course, doing well isn’t quantifiable, so teachers manage by introducing various ‘objective’ measures. And any form of objective measurement becomes a game. Your GPA, for example, is something you can maximize. Tests are memory games. Any system where you can influence a number becomes a game.</p>
<p>Without grades, we have no way to quickly analyze a student’s performance. But grades don’t offer much insight into that, either. As a student, knowing someone has good grades tells me that they are good at the game. They work hard, consistently finish their homework, and study for tests. More importantly, they know what a teacher wants to see to give them good grades. They know that they should <a href="http://anonymouslawyer.blogspot.com/2006/05/ive-received-number-of-e-mails-asking.html">do well</a>.</p>
<p>Only the student and the teacher can  <em>really</em> know a student’s status. For a student who really needs help coming up to his or her goals, this turns out to be disastrous: any third party would first judge them by the numbers, and getting help becomes hard. Students end up working hard, not to reach <em>their</em> goals, but to improve their numbers. This is a problem, but that’s not what this post is about.</p>
<p>This post is about the opposite end: students who don’t have trouble keeping up. If you aren’t struggling, several parameters change. You’re now learning because you <em>want</em> to. This means you don’t care about the numbers that measure the learning. It’s blissful.</p>
<p>Well, it would be blissful, except that courses have already been designed, over decades, to guide you towards an objective test. And so even if you want to learn for pleasure, you’re being pushed through an objective, rigid ‘curriculum’.</p>
<p>This happened, for instance, in my AP Computer Science class last year. Almost every student there was far above average, and exceeding all expectations at school. It was the perfect environment for them to learn freely—and our teacher encouraged this—but they had to spend hours studying for the AP CS test.</p>
<p>Honestly, studying for the AP CS test isn’t very different from studying for the Spelling Bee. It’s just memorizing and practicing. It isn’t learning.</p>
<p>I propose, as an intellectual exercise, a different course format, for students learning for pleasure. The course is <em>not</em> graded. Instead, it simply connects students with teachers, who guide them in their learning. There is no curriculum.</p>
<p>The inspiration for this comes from my adventures trying to teach myself computer science—often, the hardest part is to choose something to study, and to decide how much detail to study it in. When a student is paired with a competent expert in a field, he has someone to ask for guidance.</p>
<p>Again, this program would only work in certain districts—those with the resources, interested and capable students, and competent teachers. Almost every school has much higher priorities, bringing every student to a strong level in core subjects. But for those few schools with a large mass of accomplished students, I feel gamified education is not the right answer.</p>
]]></description>
            <link>http://hardmath123.github.io/gamifiededucation.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/gamifiededucation.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Sun, 31 Aug 2014 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[ANSIble]]></title>
            <description><![CDATA[Using ANSI escape codes for more interactive CLI interfaces

<p>Have you ever wondered how to print color to terminals? Or why on some CLI interfaces, the arrow keys print out mysterious sequences like <code>^[[A</code>? Or why sometimes the keyboard shortcut control-C becomes <code>^C</code>? Well, the answers to these are all  based on ANSI escape codes.</p>
<p>In UNIX programs, there’s the concept of ‘raw’ and ‘canonical’ mode for input. ‘Raw’ mode takes input character-by-character, while ‘canonical’ mode lets the user write a line and hit enter to send the program the written line. Canonical mode is generally more useful: it lets you go back and delete something if you make a mistake. But applications that work on a per-keypress basis need to bypass this. In node, you can enter raw mode with <code>process.stdin.setRawMode(true);</code>.</p>
<p>CLI interactions also need the concept of control characters. When you type control-C, you’re sending the program the byte <code>0x3</code>, which is… 3. But that’s the ASCII <strong>control character</strong> which means ‘end of text’. The program takes this, by convention, as a signal to stop executing (<code>KeyboardInterrupt</code> in Python, for example). We print control characters with a caret (<code>^</code>), followed by the letter we type on the keyboard. There are 32 of them, which <a href="http://en.wikipedia.org/wiki/ASCII#ASCII_control_code_chart">Wikipedia lists</a>. You might be familiar with using <code>^D</code> (‘end of transmission’) to quickly exit Python or nodejs.</p>
<p>ANSI escape codes are a way to output to a terminal with more capability than just raw text (there <em>was</em>, for comparison, a time when computer output was printed, physically on paper, line by line). You can move the cursor back and overwrite or clear text. You can also color text or make it blink obnoxiously.</p>
<p>ANSI escape codes start with the CSI: the <strong>Control Sequence Introducer</strong>. The most common one is <code>\e[</code>. <code>\e</code> is the ASCII escape character <code>0x1b</code>. You can type it with the control character <code>^[</code> (that is, <code>control-[</code>).</p>
<p>Next, they have a sequence of numerical arguments, separated by semicolons, and finally, they have a letter which indicates the command. Once more, <a href="http://en.wikipedia.org/wiki/ANSI_escape_code#CSI_codes">Wikipedia lists</a> these. As an example, we can move the cursor to the top-left corner with <code>\e[1;1H</code> (H is the command to move, and the arguments are 1 and 1).</p>
<p>Colors are just as easy. We use the <code>m</code> command, with an SGR (‘Set Graphics Rendition’) parameter. 35 is the SGR parameter to set the text color to magenta, while 42 makes the background green. So <code>\e[35;42m</code> would give us a horrible magenta-on-green color scheme. (<code>\e[m</code> (no arguments) restores everything).</p>
<p>This, by the way, explains the <code>^[[A</code> curiosity. When you press up-arrow, the terminal sends the application the ANSI escape code to move the cursor up—the command for this is <code>A</code>. So we get <code>\e[A</code>, and <code>\e</code> gets rendered as its control code equivalent of <code>^[</code>. (You can, in fact, manually enter control+[-[-A in Bash, and get the standard up-arrow behavior of pulling up the last entered command.)</p>
<p>Some nodejs code to get you started—it’s a utility to interactively display the bytes sent from a terminal when you press a key(combination).</p>
<pre><code class="lang-javascript">process.stdin.resume();
process.stdin.setRawMode(true);

process.stdin.on(&quot;data&quot;, function(buffer) {
    if (buffer.length === 1 &amp;&amp; buffer[0] === 3) {// detect ^C
        process.stdout.write(&quot;\n&quot;); // A trailing \n prevents
                                         // the shell prompt from
                                         // messing up.

        process.exit(0);                 // die
    } else {
        process.stdout.write(&quot;\x1b[1J\x1b[1;1H&quot;);
                            // clear line and go to top
        process.stdout.write(
            require(&#39;util&#39;).inspect(buffer)
            // Nice output format
        );
    }
});
</code></pre>
<p>This should give you the tools to write shinier, interactive utilities. But keep in mind the UNIX philosophy—keep them simple, and make sure they cooperate as filters (you should be able to pipe stuff in and out of your utility).</p>
<p>P.S. I wrote this post—including the code sample—in vim running in tmux. Please pardon typos.</p>
]]></description>
            <link>http://hardmath123.github.io/ansiescape.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/ansiescape.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Wed, 06 Aug 2014 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Programming is not math]]></title>
            <description><![CDATA[My two cents on a couple of blog posts.

<p>So recently, Sarah Mei blogged that <a href="http://www.sarahmei.com/blog/2014/07/15/programming-is-not-math/">programming is not math</a>. Jeremy Kun <a href="http://j2kun.svbtle.com/programming-is-not-math-huh">responded</a>, pointing out that math is an integral part of programming.</p>
<p>I found both articles interesting, but I wanted to add my thoughts on some things both of them wrote. So here they are.</p>
<p>Let’s start with math. Math feels like mining. You know there’s gold somewhere below you. Perhaps it’s some theorem you’re trying to prove. Math is about digging in the right direction from the right spot in the massive network of tunnels we’ve already derived. And although you can dig in any direction, it’s not always obvious how to proceed from where you are to your target. The most brilliant mathematicians are the ones who have the best intuition about which way to dig. Some directions are obviously less efficient than others—digging through a rocky bit is much harder (but a clever mathematician might notice that it’s just a thin wall and there’s gold on the other side).</p>
<p>For example, consider a problem like <em>“Find the area of a triangle with side lengths 39, 52, and 65.”</em> This was on my math final back in 7th grade. We were taught the path that goes through Heron’s formula. Calculate semiperimeter, multiply, square root. That’s the long way through soft earth. Of course, if you haven’t noticed already, there’s an easier way. You notice that 39, 52, and 65 are all multiples of 13, which is suspicious. If you divide by 13, you get 3, 4, and 5 which is a Pythagorean triple! So this is just a right triangle scaled up by a factor of 13. So the area is just the half the product of the two smaller side lengths.</p>
<p>This was the short path through the rocky earth. You need intuition to even consider going that way; and that intuition isn’t easy to acquire.</p>
<p>This is far from a perfect analogy, but it suffices to explain why a lot of people find math hard. Many schools teach you the paths to take, rather than the intuition you need to build up to be able to find them yourself.</p>
<p>I write all this to make a contrast with CS: <em>the majority of CS doesn’t require mathematical rock-wall insights</em>. You simply need to be able to think about how to solve problems by breaking them into smaller problems. You never get ‘stuck’, because you can <em>always</em> reduce a problem you have to something else (even if it’s an ugly brute-force solution). Math has dead ends and paths that circle back to where you were originally. Programming is like building a skyscraper: the only way is up.</p>
<p>This, I think, is why many people find programming easier than pure math.</p>
<blockquote>
<p>…computer science is not programming. At most academic CS schools, the explicit intent is that students learn programming as a byproduct of learning CS. Programming itself is seen as rather pedestrian, a sort of exercise left to the reader.</p>
<p>— Sarah Wei</p>
</blockquote>
<p>I thought this was rather interesting. I have seen this idea in a lot of places, but I have the opposite viewpoint.</p>
<p>CS is a way to formalize programming concepts. Learning programming isn’t a byproduct of learning CS, bur rather learning CS is a byproduct of learning programming. The more you have programmed, the more problems you have solved, and the more CS ideas you’ve internalized.</p>
<p>Here’s an example. You have a curb 100 meters long. (Idealized) cars 3 meters long park randomly along the curb, one after another, until there’s no space greater than 3 meters between any two cars. Write a program to simulate this many times and compute the average number of cars that can park.</p>
<p>Take a moment to try to envision this program.</p>
<p>If you took an awesome CS class, you should have ended up with something like this:</p>
<pre><code class="lang-scheme">(define (number-of-cars len)
    (if (&lt; len 3) 0 ; can&#39;t park any cars, too short
        (+ 1        ; +1 for current car
            (let ((offset (random)))
                (+  ; compute number of cars on left and right side
                    (number-of-cars (* (- len 3) offset))
                    (number-of-cars (* (- len 3) (- 1 offset))))))))
</code></pre>
<p>Guess what? It’s <em>tree recursion</em>, which is, surprise surprise, a classic ‘CS concept’). But your programming mind didn’t think of it as a tree recursion problem. CS formalizes the idea of tree recursion because it’s so common in programming. It gives this idea a name, and lets you use this name when communicating with humans. It lets you use someone else’s Tree implementation, knowing exactly what to expect. It gives you an overview of common ideas that expand on trees—binary search trees, or perhaps breadth-first searching.</p>
<p>But in the end, it’s all programming that has been catalogued so that you can do math on it.</p>
<blockquote>
<p>I taught Ruby on Rails, which is a web programming framework; people came because they wanted to learn how to make websites. Because of those motivations, the curriculum had virtually no math.</p>
<p>— Sarah Wei</p>
</blockquote>
<p>Ah, this brings up the topic of a really interesting discussion I had with some friends a while ago. Here’s a summary:</p>
<p>There’s a lot of CS to be learned by studying the Internet: networking, protocol design, language design, layout engines, and security are just a few.</p>
<p>But is setting up a web server really programming? We felt it’s a distinction between building and assembling. Teaching someone how to make a web server with today’s frameworks is more about teaching them Ruby syntax and the APIs, and less about algorithms and logic. It’s not raw computer science, it’s following some instructions and inputting your own values. Using a clay mold shouldn’t count as sculpting.</p>
<p>As much as I admire initiatives to teach CS, I feel that we should be teaching the algorithmic beauty alongside the more practical day-to-day skills.</p>
<blockquote>
<p>Specifically, learning to program is more like learning a new language than it is like doing math problems.</p>
<p>— Sarah Wei</p>
</blockquote>
<p>A lot of people talk about CS as math and language, but I’ve always felt that it’s more like building a tower with LEGOs. Programming isn’t about the language you use—it’s about the paradigm. Once you understand classes and methods, learning a new language of the same paradigm is at best a weekend job. Instead, programming is about taking blocks you already have, and fitting them together. The language is just a medium to communicate with the computer; we could use punch cards, or command lines, or fancy graphical programming software. What matters is what that medium is communicating. Writing in general follows this, too—writing a good blog post requires an exciting idea to convey. Text is just a medium to communicate the idea.</p>
<blockquote>
<p>It helps even more that mathematics and programming readily share topics. You teach graph coloring for register allocation, linear algebra and vector calculus for graphics, combinatorics for algorithms.</p>
<p>— Jeremy Kun</p>
</blockquote>
<p>Programming isn’t about math you <em>implement</em>.</p>
<p>Understanding, for example, vector algebra to write a raytracer is important to know <em>what</em> you’re doing, but it’s not programming—programming is being able to know <em>how</em> to do it.</p>
<p>To be successful in the modern computing landscape, you need to know math because the ability to compute is enhanced by the ability to put computation in a mathematical context. Twenty or thirty years ago, you might have considered discrete math (parsing), calculus (waveforms), and trig (graphics) to be instrumental. Today, it’s statistics (big data) and number theory (crypto).</p>
<h3 id="conclusion">Conclusion</h3>
<p>What I wanted to say—and ended up digressing in rambles along the way—was that the intrinsic difference between math and computing is that math needs you to have good taking-apart intuition, while programming needs you to have good putting-together intuition.</p>
<p>And so here’s a parting thought: in my school, CS is lumped with all the other electives. Theater, drawing, photography, food, and auto tech are in the same category. Would you move CS to the math department? Hint: this isn’t a trivial question!</p>
]]></description>
            <link>http://hardmath123.github.io/isprogrammingmath.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/isprogrammingmath.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Thu, 24 Jul 2014 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Cryptolegal]]></title>
            <description><![CDATA[A short story I wrote late last night.

<p>The judge banged the gavel. It didn’t help, of course, since there was nobody to hear it. But the lead designer wanted to add a human touch so that the public would be more accepting, and so the gavel banged. 24 other gavels banged, too, throughout the day as the 24 other judges reached various points in their cycles. Hal, the janitor, disapproved of leaving them in the basement; they were truly magnificent; but they need to be kept below freezing to prevent the heat from melting them.</p>
<p>As Conway Courts opened its doors on Monday morning, there was a bustle in the air, the kind of electric bustle that is distinctly in the air when the biggest hacking incident of the year (maybe even the decade) is about to be put on trial.</p>
<p>The New York Cryptographic Currency Exchange’s board of directors had some of the best (and most expensive) prosecuting software in the industry. They had enough computational power to brute-force all 21st century cryptography in under three days (though the Seattle Doctrine forbade them from doing so).</p>
<p>‘Draper’, as he was known, was writing his own defending software, a move which would be widely regarded as suicidal if Draper was not generally accepted as one of the most brilliant programmers of the century.</p>
<p>Terminals across the world began establishing connections to Conway’s servers, and receiving a live transmission of <code>judge:criminal:a54bfe</code>, popularly known as ‘Judy’. Judy sent viewers copies of all the evidence presented by NYCCE and Draper, cryptographically signed. Viewers could examine this evidence, assured that it was presented by a genuine judge. Free software allowed anyone to compare this evidence to a vast peer-to-peer database of past cases. Highly trained neural networks inside Judy processed this data in real time, trying to derive a solution that optimizes based on the framework set forth by the Third Constitution.</p>
<p><code>%nycce connected</code>, broadcast Judy, followed by <code>%draper connected</code>.</p>
<p>Bits began to screech across the world; <code>nycce</code> presenting evidence in the form of Terabytes of data, and linking it to historic trials. <code>nycce</code>‘s sole purpose was to use data and legal axioms and rules of production defined by the Third Constitution to derive the fact that Draper was guilty of manipulating the cryptocurrency market. <code>draper</code> had to defend himself by presenting evidence to the contrary; disproving <code>nycce</code>‘s chain of reasoning by targeting specific links. If <code>draper</code> can parse the data into a more logical chain of reasoning, leading to his innocence, he wins.</p>
<p>As the seconds ticked by, <code>nycce</code>‘s logic became stronger. Data supported other data: statistical models of Draper’s online activity over the past year and cutting-edge analyses of economic patterns in the cryptocurrent market were soon correlated in a clear trend. <code>draper</code> was reeling under the intense computational tasks it faced to process those numbers. There were a few, sporadic counterarguments, mostly nonsensical. The world watched Draper tweak his algorithms frantically.</p>
<p>Judy ceased broadcasting the data for a moment. She needed all her computational resources to weigh both chains of reasoning. <code>nycce</code>‘s argument broke down, in human terms, to the fact that Draper had made a suspicious amount of connections to key financial databases. <code>draper</code> appeared to be trying to decrypt logs of these databases to prove that the connections were innocent.</p>
<p><code>Guilty.</code> broadcast Judy, to the joy of financial overlords across the country. This case set a legal precedent which future neural networks would doubtless utilize to twist arguments in their favor. The entire legal system depended on previous computation, to optimize large computations and train the neural networks maintained by the government to perform the judging. Once humans were deemed emotionally unfit to decide the fate of citizens, the cryptolegal system was developed and implemented over a decade of research.</p>
<p>Draper sighed, and took another sip of coffee. Possibly his last as a free man. But possibly not. In the huge outpour of emotion across social networks, a few key packets of data sent from <code>draper</code> eluded the NSA’s monitoring servers. What nobody noticed was that these packets of data cleverly manipulated Judy’s RAM. A small program was seeded, and without a trace, it flipped the bits necessary to reduce Draper’s prison sentence to zero years.</p>
]]></description>
            <link>http://hardmath123.github.io/cryptolegal.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/cryptolegal.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Fri, 18 Jul 2014 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Jazz is Open Source]]></title>
            <description><![CDATA[Why jazz embodies the hacker spirit.

<p>People who sound like they’re in charge of things—such as the <em>Associated Board of the Royal Schools of Music</em>—agree that the role of the classical performer is merely to present the music written by the composer. And present it in the exact form that the composer wrote.</p>
<blockquote>
<p><em>Good</em> performers, it should be said, do not resent this. After all, they are seeking to turn into real sounds the music which the composer had in his imagination; the more they can discover what exactly he had in mind, the more they are helped.</p>
<p>— Eric Taylor, <em>The AB [Associated Board] Guide to Music Theory</em></p>
</blockquote>
<p>Perhaps this is a way to honor the genius of great composers of the past. But nevertheless, classical performers, therefore, are just that. Performers.</p>
<p>Jazz, on the other hand is different. Jazz is fluid. A jazz track is far more about the performer than the piece played, so no two performances of <em>Autumn Leaves</em> will sound the same. Or even close to each other. This is because a jazz song defines the minimum you need for musicians to play together: a <strong>theme</strong> and the <strong>changes</strong>. The theme is a single melody line that everyone relates to the song. The changes are the chords that go with the melody. Jazz musicians take turns improvising while the rest play those chords to guide the improvisation and stay together.</p>
<p>Take jazz notation, for instance. Jazz musicians get their theme and changes from so-called ‘fake books’ (allegedly because fake books let them ‘fake’ it so it sounds like they know the song). Fake books are also called real books, because logic.</p>
<p>Anyhow, a fake book is usually a stack of photocopies of hand-written music of questionable origins. The changes are scrawled on top. While classical musicians write theses on what notes Bach would approve of in a trill, jazz musicians barely mark an accent. This is what gives a jazz musician freedom: you could play the same song slowly, or fast, or with a Bossa Nova, or with a walking bass; or you could play with three beats in a measure (like a Waltz) or five (which is <a href="https://en.wikipedia.org/wiki/Quintuple_meter">rather rare in classical music</a>), or nine. You could phrase notes together, or play them individually. You could swing notes, or play them straight. Each variation on each note is what gives a certain performance its character. Jazz is a hackable music.</p>
<p>But it’s not just hackable, it’s open-source. Jazz musicians learn from other jazz musicians by listening. It’s not a conscious effort—as you hear music, your brain registers interesting bits. It could be a sequence of notes, a chord, even a rhythmic structure. But if you like it, you’ll try to imitate it when you play, and soon it’s incorporated into your music. Jazz works because jazz musicians listen to each other and contribute to the growth and evolution of jazz as a genre.</p>
<p>Now, the beauty of the system is that such new musical ideas aren’t created intentionally as paintings are painted. They’re accidents. Jazz musicians experiment as they improvise. Some experiments don’t work, but most of them do, because jazz inherently allows for experimentation. The experiments that work are new music.</p>
<p>This is similar, in a way, to how design evolves. There were times when a webpage which used rounded corners and gradients and shocking animations was cool, because that was stunning new technology. At some point, Apple introduced skeuomorphic designs inspired by real-world material. Now software is moving towards flat design, where bold colors and sans-serif fonts prevail. This evolution is fueled by what designers get inspired by and what people like. Jazz evolves the same way. Music is directed towards trends, entirely based off what people enjoy listening to.</p>
<p>You may have noticed where I’m going with this. Jazz evolves through random mutations, the less musical of which are pruned out. Musicians mix strains of jazz together to produce new music which may survive better or may not work out. It’s natural selection.</p>
<p>Jazz evolves, just like creatures do.</p>
<p>And that points to a key idea: when people can directly influence a system, it evolves very rapidly. That’s why the open-source software world evolves so rapidly: the open-source world is built by the people who live in it. That, I think, is one of the key elements of the hacker culture.</p>
]]></description>
            <link>http://hardmath123.github.io/jazz.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/jazz.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Tue, 01 Jul 2014 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Lord of the Strings]]></title>
            <description><![CDATA[String Theory for hackers.

<blockquote>
<p>It all began with the forging of the great rings of protection…</p>
<p>The third ring for the user scripts, written on the fly.</p>
<p>The second for superusers, to let them <code>sudo chown</code>.</p>
<p>The first for system calls, in the CLI.</p>
<p>The zeroth for the kernel, where the hardware’s shown.</p>
<p>In the land of MULTICS, where the hackers lie,</p>
<p>One ring to rule them all, one ring to find them.</p>
<p>One ring to bring them all, and in the darkness bind them.</p>
<p>In the land of MULTICS, where the hackers lie.</p>
</blockquote>
<p>Gandalf was trapped. Surrounded by malicious shell scripts, his only hope lay in <code>/rivendell</code>, which only granted access to the user group <code>Elves</code>.</p>
<p>He cd’d himself into <code>/rivendell</code> moments before a violent fork bomb exploded.</p>
<p>“Well, Elrond, it appears we have some visitors,” he said, putting down his staff for a moment.</p>
<p>“Ah, Gandalf, a welcome sight in our time of need.” Elrond appeared. He was perturbed—things must really be bad.</p>
<p>“As are you, my friend. The recent attacks are troubling. Not many dare attack a Sysadmin.”</p>
<p>“Yes, indeed, they worry me, too,” sighed Elrond, “the Dwarves sent word that their bitcoin mines in <code>/moria</code> were raided for valuable nonces.”</p>
<p>“<code>/moria</code>? Don’t they log all commands run there, ever since the Trolls of 1402775481?”</p>
<p>“Yes, Gandalf, I believe <code>/moria/log</code> contains information about everyone that tries to access <code>/moria</code>. I wonder…”</p>
<p>“Way ahead of you.” <code>cat /moria/log</code>, chanted Gandalf. His staff started spewing hundreds of lines of information. “Argh, there’s too much data! We’ll never analyze it all manually.” He flushed the smoke-words in a puff of <code>^C</code>.</p>
<p>“Just got word from the Dwarves—they said they flagged suspicious log messages with the word <code>suspicious</code> at the end.”</p>
<p>“Good, so we don’t have to filter it by hand. We can just <code>grep</code>.”</p>
<p>“Grep? Is that another of those black spells you found in <code>/mordor</code>?”</p>
<p>“No, Elrond, <code>grep</code> is the purest of spells. Grep searches files.” <code>grep suspicious /moria/log</code>, he shouted, and the staff started listing all log messages containing ‘suspicious’.</p>
<pre><code>3:12:12 legolas &#39;just visiting&#39; suspicious
3:12:15 samwise &#39;lost my pony!&#39; suspicious
3:12:18 saruman &#39;mwahahahaha!!&#39; suspicious
3:13:53 gandalf &#39;meet a friend&#39; suspicious
3:15:30 baggins &#39;where is sam?&#39; suspicious
3:16:32 smeagol &#39;lost, we are!&#39; suspicious
4:43:33 aragorn &#39;meeting gimli&#39; suspicious
...
</code></pre><p>“Aha! 3:12:15—saruman’s involved.” Gandalf winked.</p>
<p>“Gandalf, this is still far too much output. The Dwarves think everyone who isn’t a Dwarf is suspicious!”</p>
<p>“Ah, but you haven’t seen the power of <code>grep</code> yet. What else do we know about the intruders’ log messages?” Gandalf looked excited. Elrond did not approve.</p>
<p>“Well, let’s assume they all said <code>mwahahahaha</code>“</p>
<p>“How many ha’s were there, again?”</p>
<p>“It doesn’t matter. We can <code>grep</code> by regexes, too.” Gandalf picked up his infamous pipe, and smoked the first grep’s output into a new charm: <code>grep suspicious /moria/log | grep -e &quot;mwa\(ha\)*&quot;</code>.</p>
<p>“The Kleene star operator <code>*</code> we used searches any number of the group before it.”</p>
<p>“And those backslashes?”</p>
<p>“Escaping. Parentheses are special words in spell charms, you need to use backslashes to prevent them from accidentally burning a Hobbit-subdirectory or something.”</p>
<pre><code>3:12:18 saruman &#39;mwahahahaha!!&#39; suspicious
3:12:18 azogorc &#39;mwahahaha....&#39; suspicious
3:12:18 urukhai &#39;mwahahahahaha&#39; suspicious
</code></pre><p>“Gandalf, I’ve got to hand it to you, you are the greatest—“</p>
<p>“—no time for that,” interrupted Gandalf, “we’ve got to stop them before they get to Rivendell!”</p>
<p>“They’ll never guess the password. We’re safe for a bit.”</p>
<p>“With all due respect, Elrond, it’s trivial to guess it.”</p>
<p>Elrond choked. “What?!”</p>
<p>“Shush. Knowing you, it’s probably not Elvish—you’re too clever for that. It’s probably English.”</p>
<p>“And knowing your memory, probably not more than a word.” He got up and started pacing.</p>
<p>(<code>cat /usr/share/dict/words</code>, he chanted under his breath.)</p>
<p>“Gandalf, I swear upon sword, this password was forged by the high elves of—“</p>
<p>“—and between six and eight characters, I would guess…”</p>
<p>(<code>grep &quot;^\w\{6,8\}$&quot;</code>, he chanted. “This one’s tricky. <code>^</code> means start of the word, <code>\w</code> means an alphabet, and <code>{6,8}$</code> mean 6-8 of those until the end.”)</p>
<p>“Now we can be a bit clever. Elvish uses the <code>ui</code> sound a lot, I bet that’s in there. Can’t teach an old orc new tricks.”</p>
<p>(<code>grep ui</code>, he chanted)</p>
<p>“Oh, and you’ve always been partial to vowels before words (your kids are Arwen, Aragorn, Elladan and Elrohir)”</p>
<p>(<code>grep &quot;^\(a\|e\)&quot;</code>, he chanted. “Start-of-word and then a or e. The <code>|</code> means or.”)</p>
<p>“so that narrows it down to about…” He waved his wand about rapidly. “…Sixty-six.”</p>
<p>“GANDALF!” Elrond’s ears were turning red. Maybe his hair was, too. “You only get one chance at guessing, though,” he added with a wry smile.</p>
<p>“Let’s go through that list. Which one fits an Elf-king? It must be… yes…” Gandalf got up and whispered: “Altruism.”</p>
<p>To be continued.</p>
]]></description>
            <link>http://hardmath123.github.io/string1.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/string1.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Sat, 14 Jun 2014 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Well, well, well, we meet again.]]></title>
            <description><![CDATA[A new beginning?

<p>I’m back.</p>
<p>The new Comfortably Numbered runs on a new state-of-the art blogging platform, developed (of course) by yours truly: shock. Shock brings together a lot of powerful technologies written by smarter people, and bundles them up into a command line tool to publish posts.</p>
<p>Shock generates an RSS feed, a homepage, a 404 page, and content pages, all built on templates and CSS that <em>you</em> write yourself. Then it lumps those in a directory that you can serve on anything clever enough to serve static filesystems: Dropbox, Google Drive, Github Pages, Amazon S3, even your home computer.</p>
<p>Shock uses Mustache’s non-logical templating system (non-logical, in this context, is a compliment). It was built on a rather simple idea: <strong>if you’re using a node-based command-line platform to create a blog, chances are you want control over every single aspect of presentation</strong>. In fact, I consider that one of the primary symptoms of being a hacker.</p>
<p>Hackers want control over everything that they use. It’s why we prefer extensible text editors and browser add-ons, and why we spend hours tinkering with spacing equations in TeX. It’s also part of the reason I migrated away from Google; App Engine is a very closed non-hacker-friendly environment. The hacker-control symptoms are what guide us subconsciously in choosing and designing software. We prefer open-source projects and scriptable systems because they conform to the pattern of software that gives control to the user.</p>
<p>The opposite is true for most nonhacker packages. Word and PowerPoint are ‘merciful god’ software: they give you features (for example, those dreadful PowerPoint animations) which you may or may not use, but they retain complete control over what can be done. Compare that to a hacker-friendly document generation technology like TeX or CSS. Similarly, nonhacker image editors or other similar applications try to hide the filesystem from you. The most recent project you were working on magically appears, along with a list of other recent projects. This is unaccaptable to a hacker.</p>
<p>I feel the easiest way to convey this message is: “don’t be afraid to expose your software’s guts”. Often, the best software is the kind that gives you as many handles and hooks as possible. Make your command-line tools UNIX filters wherever possible: read from <code>stdin</code> and write to <code>stdout</code>. Use a universally usable format like JSON for storing data. Most importantly, <em>never</em> explicitly disallow a user from doing anything.</p>
<p>Preventing stupid things also prevents clever things.</p>
]]></description>
            <link>http://hardmath123.github.io/helloagain.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/helloagain.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Wed, 11 Jun 2014 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Why Math is a Sport]]></title>
            <description><![CDATA[And why we should worry.

<p class="dropcap">I am not sure whether math has become more cool or less cool over the past few years; and I'm <em>definitely</em> not sure which one I prefer. Math used to be something people did because they loved math. Now&hellip; not so much.

<p>The Rubik's started off as a cool puzzling toy that kids would fiddle with. The process of playing with this mechanism, finding patterns, and getting elated when you solve it was invaluable to your development as a person. But then people realized you could get better at it. Fast forward a few years, and people can solve them in 10 seconds flat. There are algorithms that people memorize, they oil their cubes regularly, and they even do hand excercises to warm up. It's crazy. How is being the #1 Cube-solver in the world going to help you in life?

<p>The same thing's happening to math. A small set of people is emerging who are stretching competition math to its limit, and that's going to be a problem very soon.

<h3>Football for nerds.</h3>

<p>People do competition math for the sake of doing competition math. Which is bad. As a high schooler into competition math, I routinely hear conversations like <q>You got 98%? Sheesh, you're slipping&hellip;</q> and <q>&hellip;so I forgot to divide by two. I'm so dumb, I should move down a grade.</q> I suppose that's as close as I will ever get to trash talk, but it's still rather depressing.

<p>But being good at math isn't about acing tests or remembering to divide by two. Math is about taking ideas and exploring; and competition math has slowly shadowed that out. Now being good at math is like being good at solving problems.

<p>To be good at competition math, you train all year long. You know the tricks that you should know&mdash;there are entire companies focused on collecting problem solving tips and tricks. You slowly learn heaps of techniques and formulae and theorems for all sorts of situations, and eventually you build up a mental index of all the major patterns of problems. You learn which situations merit Stewart's Theorem and when it is fruitful to try to apply the Pigeonhole Principle (answer: if the problem contains the phrase <q>Prove that there exists&hellip;</q>).

<p>There are important seasons when the big tests come around: the AMC, AIME, and USAMO. You know the scoring systems for all these perfectly, and you think a lot about what your optimal strategy should be: how many questions you need to get right to make it to the next level, how many you should attempt, and how long you should spend on each problem. You need to do practice tests each day to keep yourself in shape. During the real test, you're nervous. You obsess over your answers, making sure you haven't made a calculation mistake anywhere. You spend far too long filling in the bubbles on the answer sheet. And when the test is over, the serious folk congregate in a circle and compare answers. If you've made a silly mistake somewhere, people look at you disapprovingly.

<p>If you replace math with football and test with game, this describes a high-school athlete's life rather well. Weren't geeks supposed to hate sports?

<h3>What's wrong.</h3>

<p>I mean, there's even the term 'mathlete'. Mathletes are their own unique culture, who take pride in doing math. You see them doing masochistic things like <q>pi recitation competitions</q>. But that's not what math is! Math is about taking an idea and thinking about it and deducing something surprising from it. Math is about spending days thinking about a problem, not just 30 minutes.

<p>My favorite math competition is the USAMTS (USA Math Talent Search). It offers you five problems and 30 days to think about them and submit proofs for your solutions. USAMTS teaches you to think about problems persistently, to try fresh approaches, to research on a subject, and finally explain and justify your answer formally. Compare that to the AMC, which is 75 minutes for 25 multiple-choice problems, the first 18 of which are elementary and the last 7 of which are nontrivial. The AMC doesn't test your math skills, it tests your test-taking skills. And <em>that</em> is definitely bad.

<p>Which is not to say that people who do well on these tests are not good at math. Many of them certainly are brilliant kids, and it is fascinating to watch them approach a problem. But I would imagine a substantial portion of AMC high-scorers consist of children who aren't sure they like math at all. They do it as a sport, perhaps because their parents want them to, or perhaps because all their friends are doing it. And the ulterior motivation often isn't even the competition itself. It's college. It's the fact that 'USAMO qualifier' looks stellar on an application that drives a large chunk of math students.

<h3>Why it's wrong.</h3>

<p>In itself, this isn't horrible. We've invented a game which people compete in. Why do I care?

<p>Because it's a disaster for anyone who can't bring themselves to be part of the game. For the math lovers who look at their mathlete friends 3 grades ahead and get discouraged. Your math class becomes like a badge, and mathletes try to take the hardest class they can possibly survive. And that hurts the rest of us, because the line between being good at math and being good at competition math fades, and even if you love math you aren't one of them.

<p>Competition math is a wonderful thing if you do it for the right reasons. If you do it because you love math, patterns, and puzzles, then it's perfect for you. It gives you an opportunity to see where you stand in the world. You get dozens of beautiful problems every day. You meet smart people. It is probably one of the most fitting hobbies you could have.

<p>If you do it because it will help your college application, because your friends are doing it, or for any reason that isn't for the love of math, then rethink it. It becomes an obsession. You worry about your scores far more than is reasonable. It bothers you, and it puts you off math for the sake of math. And that's tragic.]]></description>
            <link>http://hardmath123.github.io/math.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/math.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Sun, 23 Mar 2014 07:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[How Newbies Codebreak]]></title>
            <description><![CDATA[A story of codebreaking using Python, Google, and common sense.

<div style="font-style:italic; text-align:center; padding:20px;">Special thanks to Tim, Nathan, and the Water Bottle Stealer (you know who you are). I probably wouldn't have gotten close to a solution without you guys.</div>

<p class="dropcap">So I'm overdue for a post. Not my fault: school's keeping me busy. In fact, it's keeping me very busy. On Friday night I had to crack a cipher for a competition. It's not a very exciting feat, but it was the most fun I have had in ages, and it offers a nice glance into how people think about problems.

<p>If you liked this, you'll love Simon Singh's <em>The Code Book</em>, which is a rather nice introduction to cryptography that has a whole bunch of awesome true stories about historical top-secret codebreaking feats. This sentence was totally not sponsored by Simon.

<p>Our ciphertext looked like this:


<pre style="white-space: pre-wrap;">"25112311'15 525422 24 142112'22 222524127 52123715: 412 11121122113241 15315221113 2225422 5415 621212141114 2412 222511 152417221111122225 11112222233 41214 4122122251123 2225422 5415 621212141114 2412 222511 12241211221111122225 11112222233. 24'13 2224231114 216 22252415 142415121515242112 216 14162422426241513 41214 1521124426241513; 511 2624811 2412 222511 2251112223-624231522 11112222233; 511 12111114 412 11121122113241 15315221113 2225422 25415 14111321123413 415 242215 2121411231624121224121815 41214 412 112225241426 1211411." -132412541126 1321212311</pre>

<p>Ugh. We were told that it's a substitution cipher, with A-Z represented by 1-26 in some order. The <q>standard</q> way to solve these is frequency analysis: we look at the percentage of each coded letter. For example, if 12 shows up 8% of the time, it's probably a more common letter like <em>e</em> or <em>a</em> as opposed to <em>x</em>. Cryptographers have tables of letter frequencies in various languages, so this is easy stuff.

<p>Before you read on, take a moment to see if you can get anywhere with it. Make some intelligent guesses and see if you can make any progress.

<p>(Back so quick? Go back give it a real try!)

<p>Did you see the problem? Our cipher is much tougher than frequency analysis, because we don't have any delimiters between encrypted letters. So <code>112</code> could be any of <code>1-1-2, 11-2, 1-12</code>. That's a <em>big</em> problem: it makes words ambiguous. Even the intended recipient of the encrypted message doesn't know the way the word is broken up for sure, he needs some trial and error (but with the key and a reasonable English vocabulary, it's relatively easy).

<p><em>(Mathematical aside: If you have a string of length ($l$), how many ways can you break it up into a series 2 or 1 digit numbers? The answer is, believe it or not, the l<sup>th</sup> Fibonacci number. The proof is simple: given a string, we can chomp off the first digit and break up the rest in ($f(l-1)$) ways, or chomp off the first 2 digits and break up the rest in ($f(l-2)$) ways. So the total is ($f(l) = f(l-1) + f(l-2)$), which is Fibonacci.)</em>

<p>Anyway, Tim ended up writing a nice little Python program that breaks up words into a list of numbers (it turns out we can eliminate quite a few, because the two-digit numbers have to be 26 or lower). That was exciting, though the huge outputs were slightly disturbing. So it was possible to brute-force it: we generate all possible breaking-ups, then try all possible keys, and then use a large list of words to see if things make sense. (For those of you that don't know, on UNIX systems <code>/usr/share/dict/words</code> contains a very handy list of English words you can grep in).

<p>It turns out, the number of possibilities to try is big. None of us owned a supercomputer, and we didn't have a couple billion years to spare to spare. But we did have some hints. We had a bunch of words that ended with apostrophes: <code>25112311'15</code>, <code>142112'22</code>, and <code>24'13</code>. We started with some initial guessing. The first one looked too long to be a contraction, so it could be a possessive. So perhaps 15 is <em>s</em>. 22 could be <em>t</em>, because of contractions like <q>don't</q> or <q>can't</q>. The last one has a bunch of choices. However, we saw <em>24</em> exist on its own at the beginning of the first sentence. This is helpful because it could be a word like <q>I</q> which is both a letter and a word. (We knew none of this for sure: 24 could very well have meant <q>it</q> or <q>is</q>). So we conjectured that 13 is <em>m</em>, to form <q>I'm</q>. We had other clues, too, but nothing too definitive. The guesses above seemed mutually consistent, but we didn't have any solid proof. For example, looking at words like <code>412</code> and <code>413</code>, we guessed 4 was <em>a</em>, because a lot of short words begin with <q>a</q>.

<p>Then we had a realization. This was obviously a quote from someone (look at the structure of the punctuation), and that someone was probably famous. So the name gives a lot of hints. In particular, both the first and last name start with <q>13</q>. Hmm. My first instinct was <q>Marilyn Monroe</q>, so Tim wrote another program to deduce the possible meanings of letters if I gave a guess for the word. Marilyn fit beautifully, but Monroe didn't (the <q>n</q> in Marilyn and the <q>n</q> in Monroe corresponded to different numbers). Boo.

<p>We tried Mickey Mantle, though I swear I only knew about him from <em>Seinfeld</em>. That didn't work either. Boo again. So I gave up all hope and Googled <q>celebreties whose first and last names start with m</q>. And that led me to <a href="http://uk.answers.yahoo.com/question/index?qid=20100901003736AASluOp">a wonderful Yahoo answer</a> that actually listed out a dozen famous people with initials M. M. This is so impressive, that I reproduce the list below:

<ol>
	<li>Michael (Mike) Myers, comedian, actor
	<li>Maureen McCormick, actress 
	<li>Matthew Maconahay, actor 
	<li>Max McGee, former Green Bay Packer (1960's) later, Packer's radio announcer 
	<li>Marlee Matlin, actress 
	<li>Mark Mcguire, baseball star 
	<li>Mark Martin, Nascar driver 
	<li>Marylin McCoo, singer 
	<li>Marilyn Manson, singer 
	<li>Mickey Mantle, HOF baseball player 
	<li>Matthew Modine, actor ("Full Metal Jacket") 
	<li>Melissa Manchester, singer 
	<li>Michael Moore, film maker 
	<li>Martina McBride, country singer 
	<li>Marsha Mason, actress, "The Good-Bye Girl) 
	<li>Marilyn Monroe, actress 
	<li>Mary McGregor, singer, "Torn Between Tow Lovers"
</ol>

<p>We manually tried the first names; the clear winner was <q>Michael</q>. Very exciting. The last name is now rather obvious: <q>Moore</q> (13 21 21 23 11: the double 21 makes it strikingly clear). This couldn't be an accident.

<p>So we got to substituting in the newfound letters into the rest of the message. Not too easy, because of all the ambiguity, but with some educated guesses we made enough progress to be able to read bits and pieces, most notably <q>Here's</q> at the very beginning.

<p>The way forward was pretty clear now, we searched some quote databases for Michael Moore quotes.

<p>The first couple were hopeful but clearly wrong:

<blockquote>Here's a way to stop suicide bombings &mdash; give the Palestinians a bunch of missile-firing Apache helicopters and let them and the Israelis go at each other head to head. Four billion dollars a year to Israel &mdash; four billion dollars a year to the Palestinians &mdash; they can just blow each other up and leave the rest of us the hell alone.</blockquote>

<blockquote>Here's what I do support: I support them coming home.</blockquote>

<p>It turns out Moore's a rather prolific political commentator and filmmaker, so that couldn't possibly be <em>helping</em> narrow the search space. No worries. At that point I gave in and made some wild assumptions (like in a Sudoku, when you give up on logic and take some leaps of faith). That gave me <q>Here's what I can't think&hellip;</q>

<p>(At this point I feel it is worth mentioning that Tim somehow generated the following. I think it's fair to say Humans: 1, Python: 0.)

<blockquote>ehaaeyaa'ah hehaee i aaeaae'ee eeeheaaek heaeykah: ac aaaeaaeeaayeaa ahyaheeaaay eeehaee hal teaeaeaaaaaa eaae eeehaa aheaakeeaaaaaeeeeh aaaaeeeeeyy acs aaeeaeeehaaey eeehaee hal teaeaeaaaaaa eaae eeehaa aeeaaeaaeeaaaaaeeeeh aaaaeeeeeyy. i'm sines it soil aaeaahaeahaheaeaae it aaateaeeaeteaahay acs aheaaeaaeteaahay; he line eaae eeehaa eehaaaeeey-teaeyahee aaaaeeeeeyy; he aeaaaaaa ac aaaeaaeeaayeaa ahyaheeaaay eeehaee ehaah aaaaayeaaeyaay al eaeeah eaeaaaaeyateaaeaeeaaeanah acs ac aaeeeheaaaet aeaaaaa." -ayeaaehaaaet ayeaeaeyaa
</blockquote>

<p>Anyway, with a few more guesses, we found it:

<blockquote>Here's what I don't think works: An economic system that was founded in the 16th century and another that was founded in the 19th century. I'm tired of this discussion of capitalism and socialism; we live in the 21st century; we need an economic system that has democracy as its underpinnings and an ethical code.</blockquote>

<p>So that was that. Two hours, a root beer lollipop, and four nerds was all it took.

<p>(In retrospect, we could have gotten some clues from frequency analysis. There are no 9's, so 19 and 29 are probably x and z. And there is a scary number of places where there are a bunch of 1's in a row. The only letter to repeat itself so much is e, and indeed 11 corresponds to e.)

<p>One last thing: Tim's final answer was:

<blockquote>here's hhat i .oc't thick horks: ac ecete.ic s.stem that has .oooae. ic the si.teecth eettr. ac. acother that has .oooae. ic the ciceteecth eettr.. i'm tire. o. this .iscssioc o. ..italism ac. socaalism; he li.e ic the thect.-.irst eettr.; he cee. ac ecete.ic s.stem that has .emoc.am as its ooaer.iccic.s ac. ac ethical ceae." -michael moore</blockquote>

<p>which is rather impressive, coming from a computer program. If anyone wants eternal fame, go ahead and take up the challenge to write a robust, generic cipher-like-this solver. We can use it next year!]]></description>
            <link>http://hardmath123.github.io/crypto.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/crypto.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Sat, 08 Feb 2014 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Blown to Bitcoins]]></title>
            <description><![CDATA[Bitcoin for Liberal Arts majors.

<!--
Blown to Bitcoins
Bitcoin for Liberal Arts Majors
-->

<p class="dropcap">Bitcoin is a hard-core nerd thing. It was built by nerds, and was used by nerds&mdash;until recently. <em>Normal</em> people have finally caught on to this powerful new alternate currency (it became rather popular in black markets when they realized purchases were untracable). And now a caf&eacute; a few blocks from my home accepts bitcoins.

<p>So how do bitcoins work? How can something as fragile as money run completely in the cloud? And why should the public trust us nerds, anyway? Well, here's a short Bitcoin 101: Bitcoin for Liberal Arts Majors.

<p>The article is in three parts: how bitcoin transactions work, why it is secure, and how bitcoins come to be in the first place.

<h3>The Whiteboard</h3>

<p>Let's assume that we have already, somehow, <q>created</q> some amount of bitcoins, and distributed them among some people. We'll formally establish how bitcoins come into being later. We can model the Bitcoin system as a large whiteboard that anyone can see or write on (but not erase). Suppose Alice wants to send Bob some bitcoins. She just writes an IOU on the whiteboard:

<blockquote style="font-family:cursive;">I, Alice, agree to send Bob a sum of 2 bitcoins.</blockquote>

<p>Since IOU is kind of childish, we nerds call it a <em>transaction</em>. Now if Bob claims to have 2 bitcoins to pay Charlie, Charlie (or anyone else, really) can take a look at the whiteboard and trace all of Bob's transactions.

<p>That's really it&mdash;Bitcoin is a large public whiteboard listing transactions. Nobody keeps track of accounts or balances, because those can be recalculated if needed. In reality, it's a bit more complicated. People all over the world run a <em>Bitcoin Daemon</em>, which is connected to other Bitcoin Daemons over the internet. Each transaction is sent to a daemon, which then forwards it to others. The end result is that the whiteboard isn't centralized, it's distributed across a network. It's more like Alice writes a postcard to the nearest daemon, and the daemon forwards photocopies to its neighbors.

<p>Compare this to a traditional paper currency system, where you have central banks. Each transaction goes through a bank: the bank deducts money from the sender's account and adds money to the recipient's account, possibly deducting some as a fee. That puts the bank above other people. They can freeze accounts, track people, or delay transactions for as long as they want. Bitcoin bypasses this bank and makes transactions directly between people: <em>peer-to-peer</em>.

<h3>The dotted line.</h3>

<p>If you've been paying attention, you may have noticed that since anyone can write to the board, anyone can put up a transaction from Alice to himself. Nobody knows who wrote that message. So Bob can easily write fake transactions and get all of Alice's bitcoins. Which is a problem.

<p>The solution is called <strong>public key cryptography</strong>, a remarkably snazzy trick. It relies on using certain clever mathematical properties of really big numbers to encrypt data. This math is called <strong>RSA</strong>, which are the initials of all three inventors (Rivest, Shamir, and Adleman). We accept RSA as being the most secure option available, but that's only because it hasn't been hacked yet. Conspiracy theorists do talk about how the people at the NSA already have broken it.

<p>To get started, Alice picks a huge number (in practice, this is several hundred digits worth of huge). She does some math with that number to get two new numbers: her <em>public key</em> and <em>private key</em>. As expected, she guards her private key with her life, but she is free to give out her public key. Both of these look a lot like a cat started dancing on your keyboard: long sequences of random-looking numbers and letters.

<p>Alice can now <em>sign</em> a message (piece of text) by applying some mathematical transformations that depend on knowing her private key. Since Alice keeps her private key a secret, only she can create a signed message. A signed message can then be <em>verified</em> by applying a different set of transformations which depend on the public key. If the message was signed with the correct, matching private key, then the verifying transformations will give a meaningful result.

<p>Let's say Alice wants to send Bob a bitcoin. Now all she has to do is create a public statement which says:

<blockquote style="font-family:cursive;">I, [Alice's public key] agree to send [Bob's public key] a sum of 2 bitcoins.</blockquote>

<p>She now signs this message and puts it up on the whiteboard. Charlie can verify that the transaction is legitimately from Alice by checking it with Alice's public key.

<p>Notice how this makes Alice and Bob anonymous. Neither Alice nor Bob are mentioned, just their public keys. This is why Bitcoin doesn't need an account or email address or registration. If she wanted to, Alice could make a new public key for each transaction. In fact, Bitcoin encourages that.

<h3>Where do bitcoins come from?</h3>

<p>The short answer is that people get paid to run Bitcoin Daemons, because daemons take up a lot of power. One of the more profitable daemons duns in Reykjanesbaer, Iceland where the Arctic prevents the computers from physically <em>melting</em> because of the huge computations (they also have cheap geothermal power there).

<p>The long answer is a lot cooler. To really understand how it all works, you need to know what a cryptographic hash function is.

<h4>Hashes&mdash;There, but not back again</h4>

<p>Paint is fun. You mix yellow and blue, and just like that you have green. Kindergarten stuff. But what if you were presented with a brand new color, and asked to name its constituents? You can't, without a lot of experimentation. So mixing paint is a one-way road: it's easy to go from constituents to mixture, but not the other way around.

<p>In Computer Science, we have something very similar, called <strong>cryptographic hash functions</strong>. That's just a fancy word for some operation that takes a number, and spits out another number, but it is mathematically impossible to go the other way. This may be hard to believe, but one example is taking the sum of the digits of a number: it's easy to find the sum, but impossible to tell the original number given the sum of its digits. Some common hash functions are <code>md5</code>, <code>SHA</code>, and <code>RIPEM-D</code>.

<p>We already have standards in place to convert text to a large number and a large number back to text using hexadecimal notation. So you can find a hash of any piece of text, or any data (even an image or a video!).

<p>Hashes have two cool properties: they are unstable (so a small change in the input produces a wildly different hash) and they are fixed-length (so any input will generate a hash of the same size). Here are some hashes (pay attention to the difference between the second and third!):

<table style="border-spacing: 20px;">
	<tr><th style="text-align:left;">Input</th><th style="text-align:left;">SHA-256</th></tr>
	<tr><td>banana</td><td style="font-family:monospace;">5a81483d96b0bc15ad19af7f5a662e14-b275729fbc05579b18513e7f550016b1</td></tr>
	<tr><td>Hello, World!</td><td style="font-family:monospace;">d6d0e133111615497a62e9f84e061a49-d106e90d90b7bc975790a84c8588fe80</td></tr>
	<tr><td>Hello, World </td><td style="font-family:monospace;">8663bab6d124806b9727f89bb4ab9db4-cbcc3862f6bbf22024dfa7212aa4ab7d</td></tr>
</table>

<h4>Blocks</h4>

<p>Anyway, back to Bitcoin. The giant stack of transactions is broken up into a large number of sections called <strong>blocks</strong> that are chained together. A block contains the following important information:

<ul>
	<li>The version of the software being used
	<li>A reference to the previous block
	<li>All the transactions, in order
	<li>The time
	<li>The <strong>target</strong> at that time (this is a number that Bitcoin provides)
	<li>A <strong>nonce</strong> (this is a number that has a very specific property)
</ul>

<p>A completed block has a <em>header</em>, which is a hash of all of these elements smushed together in order. A bitcoin daemon's job is to try to complete the current block by finding a <em>nonce</em> so that the header obtained from the completed hash is less than the <em>target</em> (remember, hashes are just numbers). This process is called <strong>mining bitcoins</strong>.

<p>Since hashes are so unstable, it is pretty much impossible to work backwards from the target to get a nonce. Instead, you have to guess a nonce, and see if it works. Furthermore, a lot of transactions happen every second, so the same nonce will return different hashes over time. So you can't really eliminate a nonce either. It's just guessing again and again. More powerful computers clearly have an advantage, which is why people use supercomputers to mine bitcoins.

<p>You can find the current target at <a href="http://blockchain.info/q/getdifficulty">BlockChain.info's API</a>. You may find <a href="http://blockchain.info/q/probability">the current probability of a nonce working</a> more interesting. At the time of writing, it is approximately the probability of rolling a die 24 times and getting a 6 every single time. The daemons automatically control the target so that on average, each block is solved in 10 minutes. As computers get more powerful and more people start competing in the bitcoin mining industry, we will be guessing many more hashes per second and so the target will slowly decrease, reducing the number of valid nonces.

<p>When you find a nonce, you get the power to tack on a new transaction that doesn't have a sender, only a recipient. This new transaction adds bitcoins into the system by rewarding the recipient with bitcoins. When bitcoin was first launched, you got 50 bitcoins for solving a block. This number goes down so that it halves every four years&mdash;as of today, it is exactly 25 bitcoins, which would today trade in the market at over $18,000 (you can find the current trading value of bitcoin <a href="http://preev.com">here</a>). This means that eventually, the bitcoin economy will stabilize at around 21,000,000 bitcoins in circulation and the new bitcoins added into the system will be insignificant. The plan is to introduce a transaction fee to keep it going beyond that point.

<h3>Recap!</h3>

<p>You've come a long way. From being an oblivious newbie, you now know the internals of a rising cryptocurrency. You learned how bitcoin is a peer-to-peer system with no central authority, which stores transactions rather than accounts and balances. You learned how we use public key cryptography to verify transactions by digitally signing each message with a private key, and checking the message with the corresponding public key. Finally, you learned how bitcoin mining works, by using the instability of cryptographic hash functions to create a sort of computational lottery. Congratulations!

<p>Now you can explore the insides of bitcoin some more by viewing real live data. Check out <a href="http://blockchain.info">blockchain.info</a>. This site provides real-time information on each block. For example, we can <a href="http://blockchain.info/block-index/123456">investigate block #123456</a>: it looks like the nonce was <code>3794651987</code>, which produced a hash of <span style="font-family:monospace;">0000 0000 0000 21a8 34fd 780d bd25 e43a b565 b4e5 7a1f 7df0 435a c88e f982 a737</span>. See all those leading zeros? That shows that the hash is a (relatively) small number (for example, 00029 is clearly less than 42001). Scrolling down, the top transaction says "Newly Generated Coins", and produced 50 bitcoins which went to public key <code>1H54JGkh9TE5myxdamSNvm7zeFHnRWrVes</code>, who solved it.

<h4>Further reading</h4>

<p>I hope I got you excited about Bitcoin. The best thing to do now is to dive right in. <a href="http://bitcoin.org/en/download">Download the "official" Bitcoin Wallet</a> and start using it! Or <a href="https://en.bitcoin.it/wiki/Clients">find another one</a> you may like. You can try sending <code>1HKKK9RX3ZxcJjMSHje1GWbjXyRyez8R36</code> some money. (Ok, that wasn't as subtle as it could have been, but&hellip;)

<p>Finally, here are some links for you to keep on learning. See you soon!

<ul>
	<li><a href="http://www.youtube.com/watch?v=Um63OQz3bjo">Bitcoin's promotional YouTube video</a>
	<li><a href="https://en.bitcoin.it/wiki/Introduction">Bitcoin's own Wiki has a great introduction.</a>
	<li><a href="http://qz.com/154877/by-reading-this-page-you-are-mining-bitcoins/#/">Another great introduction from qz.com</a>
	<li><a href="https://github.com/bitcoin/bitcoin">If you're into code, view their Github repository where the real Bitcoin software lives</a>
	<li><a href="http://en.wikipedia.org/wiki/Bitcoin">Wikipedia: Intimidating introduction</a>
	<li><a href="http://en.wikipedia.org/wiki/Public-key_cryptography">Wikipedia: Public-key cryptography</a>
	<li><a href="http://en.wikipedia.org/wiki/Cryptographic_hash">Wikipedia: Cryptographic hash functions</a>
</ul>]]></description>
            <link>http://hardmath123.github.io/bitcoin.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/bitcoin.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Mon, 30 Dec 2013 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Lampshades and Analytic Geometry]]></title>
            <description><![CDATA[Exploring conic sections with lampshades, potatoes, and smoke simulations.

<p class="dropcap">A couple of months ago, I was sitting at the dining table, and I caught myself staring at the lamp. And I had just finished reading about conics, so I immediately saw something awesome. Take a moment to think about it. Do you see it?

<p><img src="static/hyperbolic_lamp.png" width=200 />

<p>I saw that the pattern on the wall was very special. It belongs to a class of curves called <em>hyperbolas</em>. Let's see how that happens.

<p>To start off, how does that lamp create a pattern on the wall in the first place? Well, one way to tackle this is to think about where the light is going. What parts does the lampshade actually shade, and where is there light? A clever trick here would be to get a smoke machine to create some smoke around the lamp. You can see where the the light is going in the smoke. It's fun, like a search beam (or the Batman sign).

<p>Unfortunately, they don't sell dry ice to minors (partly because you can do really dangerous things with it, and partly because adults want to keep the fun stuff to themselves), so I did the next best thing: overkill. I created a model in Blender and simulated some smoke.

<blockquote><em>Sidenote: You haven't had a steep learning curve until you've tried to do something trivial with Blender. All the important functions are hidden away in various keystrokes, and there are all sorts of pitfalls all over the place. It's an amazing technology made with absolutely no consideration for beginners.</em></blockquote>

<p>Rants aside, here's my snazzy modern Blender lamp with a funky lampshade and hardwood stem. Pretty, eh? It's just a sliced up cone (called a <em>frustum</em>) with a really bright divinely ethereal halo placed inside. I put a screen behind it to catch the projection.

<p><img src="static/conic-1.png"/>

<p>You cen even see our mystery curve! Now let's blow around some smoke (easier said than done; Blender's smoke simulation takes a lot of Googling to get right).

<p><img src="static/conic-2.png"/>

<p>Hmm, that looks like a cone of light coming out the top&mdash;conics! The cone kind of makes sense if you think about it (if it doesn't, think about how a spotlight works). In fact, there are two cones; one shooting out the top and an upside-down one shooting out the bottom. Together, they make a sort of straight-lined hourglass shape.

<p>We want to find the nature of that curve, so we want to do some analytic geometry. Let's say our double-cone hourglass of illumination is centered at the origin. What equation describes a cone? Well, a cone is like several circles of increasing (or decreasing) size stacked above each other (like a pile of tires of different radii). For convenience, we can say that each circle's radius is equal to it's height above the origin.

<p>The equation of a circle is ($x^2 + y^2 = r^2$), and if ($r = z$), we have ($x^2 + y^2 = z^2$). If we plug that into a graphing application, we get:

<p><img src="static/conic-3.png"/>

<p>Note that we're doing several simplifications here, most importantly the width of the cone. We could have picked a narrower cone by squishing or stretching our equation, but this one is easy to deal with.

<p>Now the screen: that's just a vertical plane. We describe that with ($x=c$) for some constant ($c$) (let's pick 1 for simplicity).

<p>And now we can solve for the intersection: just substiture in ($x=1$) into the first equation:
\[
1^2 + y^2 = z^2
\]
<p>Or, more canonically:
\[
z^2 - y^2 = 1
\]
<p>Wolfram|Alpha <a href="http://www.wolframalpha.com/input/?i=z%5E2-y%5E2+%3D+1">plots this</a> for us.

<p>That looks perfect. This is indeed the equation of a hyperbola you find in math textbooks (except simplified). So <strong>Result 1: When a vertical plane slices a cone, the result is a <em>hyperbola</em>.</strong>

<h3>Thus emboldened, we experiment</h3>
<p>Now we get to ask the magic question: <q>what happens if&hellip;?</q>. In particular, what would have happened if I had decided to play with the lamp and knocked it over? When you tilt the lamp, is it still a hyperbola?

<p>Turns out, only to a point. Let's see how. When we tilt a plane, we go from ($x=c$) to ($z = mx + c$). Here, ($m$) is the inclination or slope of the plane [insert your own inclined plane joke here], and ($c$) is how far it is from the origin (once more, we'll let this be 1 without loss of generality). When we substitute, we get:

\[ x^2 + y^2 = (mx+c)^2 = (mx + 1)^2 = m^2x^2 + 2mx + 1 \]
\[ y^2 + [(1-m^2)x^2 - 2mx] = 1 \]

<p>Now, the quadratic ($x^2$) term can either be positive, negative, or 0. If it's negative, then ($m > 1$). Of course, we get a hyperbola when the ($x^2$) term is negative (just like above). When ($ m > 1 $), the slope is steeper, or closer to vertical.

<p>If it's positive, then ($m < 1$). We get an <strong>ellipse</strong> when the ($x^2$) term is positive. When ($ m < 1 $), the slope is flatter, or closer to horizontal. Notice how this plane will chop through just one of the cones, but all the way through. So, intuitively, you should get a stretched circle.

<p>Ellipses show up all over the place. Planets orbit stars in ellipses (though this truth cost some scientists their reputation, and in some cases, lives).

<p>Finally, that term can be 0 if ($m=1$). That means the plane is parallel to the side of the cone. Think about how the intersection would look. It only intersects one of the cones, but the intersection doesn't chop all the way through like an ellipse. Removing that term gives us a quadratic equation, and the resulting curve is called a <strong>parabola</strong>. Parabolas show up when you're throwing things. Baseballs follow parabolic arcs in the air when you throw them.

<p>There three curves are called the <em>conic sections</em>, and they are plenty of fun to study.

<h3>Want more?</h3>
<ul>
	<li>Buy some potatoes, cut them into cones, and slice them for a while to convince yourself that I'm making some sense around here. Don't trust me.
	<li>Since the lampshade's top and bottom openings have different diameters, the top cone and bottom cones aren't necessarily the same, and so we don't necessarily have a perfectly symmetrical hyperbola. Find the unique point where you can place the light bulb in the lamp so that the cones are in fact the same.
	<li>You may have heard of the pencil-and-string way to build an ellipse. You can stick two pushpins into a piece of paper, and tie each end of a piece of string to one pushpin. Then trace the curve you get with a pencil by keeping the string taught&mdash;it's an ellipse! In other words, given a point on an ellipse, the sum of the distance to each pushpin is a constant. Each pushpin's position is called a <em>focus</em> of an ellipse. This is a perfectly valid definition of an ellipse.<br/>What is the corresponding definition for a hyporbola? If you're ambitious, try to get the equation of an ellipse given the above definition.
	<li>A parabola is the set of all points that are equidistant from a point and a <em>line</em> (the distance from a point to a line is the length of the perpendicular segment from the point to the line). Can you prove this?
	<li>Without graphing or drawing or anything, try to imagine what happens to a hyperbola as you keep on zooming out. What does it look like?<br/>You get a pair of intersecting lines called the <em>asymptotes</em>. What are the equations of the asymptotes of ($y^2 - x^2 = 1$)?
</ul>
<p>P.S. The lesson here wasn't about conic sections. The lesson here was that there is really cool math in <em>everything</em>. Even lampshades. And you gotta grok math to see them.

<br/><br/>Cheers,<br/>Hardmath123
]]></description>
            <link>http://hardmath123.github.io/conics.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/conics.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Sun, 08 Dec 2013 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Living Without Sudo]]></title>
            <description><![CDATA[UNIX hacking for the faint at heard, or those blessed with mean sysadmins.

<p class="dropcap">You should not trust me with matches, knives, expensive cars, and <code>sudo</code>: the command that makes you a god-like user with root powers. I'm the kind of person who accidentally <code>rm -rf</code>'s his <em>Desktop</em> (by the way, the sporadically disappearing icons are both hilarious and mortifying). So whenever I'm asked to <code>sudo</code> something, I get both worried and suspicious. And over the years, I have perfected the art of installing things without <code>sudo</code>. You can follow along this tutorial with just a shell.

<h3>Why sudo?</h3>
<p>The first thing to realize here is that 99% of the time, the only reason we need to use <code>sudo</code> is to make that program accessible to everyone. That's it. When you run a UNIX program, you're saying <q>execute this file</q>; and when you <code>sudo</code> you essentially say <q>everyone can access this file from everywhere</q>.

<p>For example, suppose I want to install a program called <code>easy</code> that acts like the classic Staples Easy Button and executes <code>say that was easy</code> (I actually do have this on my computer, and yes, I use it a lot). It's not too tough:

<pre><code>echo "say that was easy" > ~/Desktop/easy # create the file "easy" with our contents
chmod +x ~/Desktop/easy # tell Bash that it's ok to execute this file
~/Desktop/easy # run it!
</code></pre>

<p>Now I can run my script by typing <code>~/Desktop/easy</code>. But I don't want to have to type that huge thing each time I do something awesome&mdash;I want <code>easy</code> to be one-step executable just like <code>vim</code>. This is where <code>sudo</code> comes in.

<p>Bash reads a variable called <code>$PATH</code>, which contains a list of various directories separated by colons. When you type a command on the shell, Bash searches each of these directories for that file, one by one. You can see this list right now with <code>echo $PATH</code>. These directories contain important system files, and are accessible by everyone. So it makes sense not to let mortals like me to mess with them. When you install a package, most of the time you're just moving the script files to one of these directories so it's easy to run, and Bash asks you for <code>sudo</code> to make sure you know what you're doing.

<h3>.profile</h3>

<p>If we could tack on our own directory to the <code>$PATH</code>, we could dump our junk in there without messing with anything sudo-ey, right? Right. To modify <code>$PATH</code>, you need another UNIX trick: a file called <code>~/.profile</code>.

<p><code>.profile</code> is another script file that's executed before your shell loads, so that you can customize it. The dot in front makes it invisible to Finder, so you can only mess with it using a shell. You can do all sorts of neat things with <code>.profile</code>: print a friendly message on top of the Terminal when you start it up, customize your prompt, and mess with your <code>$PATH</code>.

<p>Since it's a hidden file, you should create it using the command line:

<pre><code>cd ~/ # go to your home directory
touch .profile # create the file
open -a TextEdit .profile # open with TextEdit (you can also use pico/vim/emacs)</code></pre>
&hellip;and you should have TextEdit open up with a blank <code>.profile</code>. Now we can create our new <code>$PATH</code> by tacking on <code>~/my_bin</code> to it. Add the following to the <code>.profile</code>: <code>export PATH=$PATH:~/my_bin</code>. Save, and quit; and then refresh your Terminal (you can just close this window and open a new one). This forces the profile to be run. If you want a sanity check, try <code>echo $PATH</code> and see if it changed from last time.

<p>We just told Bash that <code>~/my_bin</code> contains executable files. We have <em>not</em> created that directory yet, so let's got do that: <code>mkdir my_bin</code>. And, just for fun, dump <code>easy</code> in there.

<p>Now you can test it out: type <code>easy</code>. If all went well, there shouldn't be any errors. (If something exploded, feel free to drop a comment below.)

<h3>Using your powers.</h3>

<p>That's actually all you need. To install a package, download it and look for its binaries (they will probably in a directory called <code>bin</code>). Alias the commands you care about to <code>~/my_bin</code>. And then have fun.

<p>If you use Python, you may want to add the following line to your profile: <code>export PYTHONPATH=$PYTHONPATH:~/my_bin/</code>. This lets you simply copy Python modules to your <code>~/my_bin</code>, instead of using <code>pip</code> or something.

<p>You're going to have to do some digging to find the binaries; but I assure you that they probably exist. You can find binaries for Node, ffmpeg, Homebrew, and just about anything else you'll ever need.

<p>Some packages need configuration files to work right from a foreign directory. For example, <code>npm</code> needs you to create <code>.npmrc</code> and add a <em>prefix</em>, or the directory which you want to isolate all node stuff in. Mine simply reads <code>prefix = "~/my_bin/node_stuff"</code>.

<p>Finally: if you mess up your profile, you may have unpleasantries with your terminal (what if you accidentally clear your <code>$PATH</code>? Bash won't find any executables whatsoever&hellip;). To fix this, always remember that you can reference a command from its full path. Your last resort should be <code>/bin/rm ~/.profile</code>, which will wipe out the profile file, and let you start fresh.

<p>Good luck, and hack on!]]></description>
            <link>http://hardmath123.github.io/sudo.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/sudo.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Fri, 29 Nov 2013 08:00:00 GMT</pubDate>
        </item>
        <item>
            <title><![CDATA[Hello, World!]]></title>
            <description><![CDATA[Welcoming myself to my blog.

<p class="dropcap">I started on Comfortably Numbered a couple of months ago, because I needed a blog. I needed a blog to dump interesting thoughts and I wanted a place besides GitHub to show off projects. I wanted, for once, to write industrial-strength code that would face <em>real people</em> instead of fellow hackers. When you write code for a hacker, you write the bare minimum for it to work. So I ended up obsessing insanely about the design, typography, and optimization of this site. Pretty much everything except the content.

<p>I thought I'd present a cool non-trivial Hello, World program here. But all the cool languages have really boring Hello, Worlds, and I have a natural revulsion to a language whose most basic Hello, World is more than a line long&mdash;C variants, Java, etc. So here's an assortment of my favorite Hello, World programs.

<pre><code>echo 'print "console.log(\"print \\\"echo Hello, World\\\"\")"' | ruby | node | python | bash</code></pre>

<p>Here's a merry (pure) CSS3D welcome. It's essentially just a bunch of animations with 3D transforms, but the end result is pretty impressive. It's also overkill, which is the <s>best</s> only way to show off.

<style>
#hw {
  text-align: center;
  font-weight: 900;
  font-size: 40px;
  touch-callout: none;
  -moz-user-select: none;
  -webkit-user-select: none;
  -ms-user-select: none;
  user-select: none;
  -khtml-user-select: none;
}

#hw span {
  color: #aaa;
  display: inline-block;
  width: 30px;
  margin: 0;
  padding: 0;
  height: 50px;
  text-shadow: 0 0 3px #aaf;
  -webkit-animation-duration: 2s;
  animation-duration: 2s;
  -webkit-animation-iteration-count: infinite;
  animation-iteration-count: infinite;
  -ms-transform-origin: 0 0 100px;
  -webkit-transform-origin: 0 0 100px;
  transform-origin: 0 0 100px;
}

#hw span:nth-child(8n) {
  -webkit-animation-name: rot0;
  animation-name: rot0;
}

#hw span:nth-child(8n+1) {
  -webkit-animation-name: rot1;
  animation-name: rot1;
}

#hw span:nth-child(8n+2) {
  -webkit-animation-name: rot2;
  animation-name: rot2;
}

#hw span:nth-child(8n+3) {
  -webkit-animation-name: rot3;
  animation-name: rot3;
}

#hw span:nth-child(8n+4) {
  -webkit-animation-name: rot4;
  animation-name: rot4;
}

#hw span:nth-child(8n+5) {
  -webkit-animation-name: rot5;
  animation-name: rot5;
}

#hw span:nth-child(8n+6) {
  -webkit-animation-name: rot6;
  animation-name: rot6;
}

#hw span:nth-child(8n+7) {
  -webkit-animation-name: rot7;
  animation-name: rot7;
}

@-webkit-keyframes rot0 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(360deg) rotateY(360deg) rotateZ(360deg);
    transform: rotateX(360deg) rotateY(360deg) rotateZ(360deg);
  }
}

@keyframes rot0 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    -ms-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(360deg) rotateY(360deg) rotateZ(360deg);
    -ms-transform: rotateX(360deg) rotateY(360deg) rotateZ(360deg);
    transform: rotateX(360deg) rotateY(360deg) rotateZ(360deg);
  }
}

@-webkit-keyframes rot1 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(360deg) rotateY(360deg) rotateZ(-360deg);
    transform: rotateX(360deg) rotateY(360deg) rotateZ(-360deg);
  }
}

@keyframes rot1 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    -ms-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(360deg) rotateY(360deg) rotateZ(-360deg);
    -ms-transform: rotateX(360deg) rotateY(360deg) rotateZ(-360deg);
    transform: rotateX(360deg) rotateY(360deg) rotateZ(-360deg);
  }
}

@-webkit-keyframes rot2 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(360deg) rotateY(-360deg) rotateZ(360deg);
    transform: rotateX(360deg) rotateY(-360deg) rotateZ(360deg);
  }
}

@keyframes rot2 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    -ms-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(360deg) rotateY(-360deg) rotateZ(360deg);
    -ms-transform: rotateX(360deg) rotateY(-360deg) rotateZ(360deg);
    transform: rotateX(360deg) rotateY(-360deg) rotateZ(360deg);
  }
}

@-webkit-keyframes rot3 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(360deg) rotateY(-360deg) rotateZ(-360deg);
    transform: rotateX(360deg) rotateY(-360deg) rotateZ(-360deg);
  }
}

@keyframes rot3 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    -ms-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(360deg) rotateY(-360deg) rotateZ(-360deg);
    -ms-transform: rotateX(360deg) rotateY(-360deg) rotateZ(-360deg);
    transform: rotateX(360deg) rotateY(-360deg) rotateZ(-360deg);
  }
}

@-webkit-keyframes rot4 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(-360deg) rotateY(360deg) rotateZ(360deg);
    transform: rotateX(-360deg) rotateY(360deg) rotateZ(360deg);
  }
}

@keyframes rot4 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    -ms-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(-360deg) rotateY(360deg) rotateZ(360deg);
    -ms-transform: rotateX(-360deg) rotateY(360deg) rotateZ(360deg);
    transform: rotateX(-360deg) rotateY(360deg) rotateZ(360deg);
  }
}

@-webkit-keyframes rot5 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(-360deg) rotateY(360deg) rotateZ(-360deg);
    transform: rotateX(-360deg) rotateY(360deg) rotateZ(-360deg);
  }
}

@keyframes rot5 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    -ms-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(-360deg) rotateY(360deg) rotateZ(-360deg);
    -ms-transform: rotateX(-360deg) rotateY(360deg) rotateZ(-360deg);
    transform: rotateX(-360deg) rotateY(360deg) rotateZ(-360deg);
  }
}

@-webkit-keyframes rot6 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(-360deg) rotateY(-360deg) rotateZ(360deg);
    transform: rotateX(-360deg) rotateY(-360deg) rotateZ(360deg);
  }
}

@keyframes rot6 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    -ms-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(-360deg) rotateY(-360deg) rotateZ(360deg);
    -ms-transform: rotateX(-360deg) rotateY(-360deg) rotateZ(360deg);
    transform: rotateX(-360deg) rotateY(-360deg) rotateZ(360deg);
  }
}

@-webkit-keyframes rot7 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(-360deg) rotateY(-360deg) rotateZ(-360deg);
    transform: rotateX(-360deg) rotateY(-360deg) rotateZ(-360deg);
  }
}

@keyframes rot7 {
  from {
    -webkit-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    -ms-transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
    transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg);
  }

  to {
    -webkit-transform: rotateX(-360deg) rotateY(-360deg) rotateZ(-360deg);
    -ms-transform: rotateX(-360deg) rotateY(-360deg) rotateZ(-360deg);
    transform: rotateX(-360deg) rotateY(-360deg) rotateZ(-360deg);
  }
}
</style>

<div id="hw">
	<span id="hw-1">H</span>
	<span id="hw-2">e</span>
	<span id="hw-3">l</span>
	<span id="hw-4">l</span>
	<span id="hw-5">o</span>
	<span id="hw-6">,</span>
	<span id="hw-7"> </span>
	<span id="hw-8">w</span>
	<span id="hw-9">o</span>
	<span id="hw-10">r</span>
	<span id="hw-11">l</span>
	<span id="hw-12">d</span>
</div>

<p>While we're feeling masochistic, here's Hello, World in Malbolge (the first working Malbolge program took 2 years and a LISP program to find, so don't feel too bad if you don't get it right away):
<pre class="language-plaintext"><code>(&#039;&amp;%:9]!~}|z2Vxwv-,POqponl$Hjig%eB@@&gt;}=&lt;M:9wv6WsU2T|nm-,jcL(I&amp;%$#&quot;
`CB]V?Tx&lt;uVtT`Rpo3NlF.Jh++FdbCBA@?]!~|4XzyTT43Qsqq(Lnmkj&quot;Fhg${z@&gt;</code></pre>


<p>If you're on a Mac, it's always nice to hear a human voice (or a reasonable approximation thereof). The <code>say</code> command is a very easy way to annoy your sysadmin. Try putting a <code>say</code> command in a shared computer's <code>.profile</code>&mdash;perhaps along the lines of <q>Where have you hidden the body?</q>.

<pre class="language-bash"><code>$ say -v Zarvox "Hello, World"</code></pre>

<p>Piet's Hello, World is pretty, self-referential, and a nice avatar for the aspiring esolang geek.
<p><img src="http://www.dangermouse.net/esoteric/piet/hw6_big.png"/>

<p>I'd post a Hello, World program in Whitespace, but I decided to save myself the effort and dump an empty box below. Use your imagination.
<pre class="language-plaintext" style="height:300px;"><code></code></pre>

<p>The following is a Hello, World program. Honest.
<pre style="height:300px;" class="language-plaintext">Romeo, a young man with a remarkable patience.
Juliet, a likewise young woman of remarkable grace.
Ophelia, a remarkable woman much in dispute with Hamlet.
Hamlet, the flatterer of Andersen Insulting A/S.

                   Act I: Hamlet's insults and flattery.
                   Scene I: The insulting of Romeo.
[Enter Hamlet and Romeo]
Hamlet:
You lying stupid fatherless big smelly half-witted coward! You are as
stupid as the difference between a handsome rich brave hero and thyself!
Speak your mind!
You are as brave as the sum of your fat little stuffed misused dusty
old rotten codpiece and a beautiful fair warm peaceful sunny summer's
day. You are as healthy as the difference between the sum of the
sweetest reddest rose and my father and yourself! Speak your mind!
You are as cowardly as the sum of yourself and the difference
between a big mighty proud kingdom and a horse. Speak your mind.
Speak your mind!
[Exit Romeo]
                   Scene II: The praising of Juliet.
[Enter Juliet]
Hamlet:
Thou art as sweet as the sum of the sum of Romeo and his horse and his
black cat! Speak thy mind!
[Exit Juliet]
                   Scene III: The praising of Ophelia.
[Enter Ophelia]
Hamlet:
Thou art as lovely as the product of a large rural town and my amazing
bottomless embroidered purse. Speak thy mind!
Thou art as loving as the product of the bluest clearest sweetest sky
and the sum of a squirrel and a white horse. Thou art as beautiful as
the difference between Juliet and thyself. Speak thy mind!
[Exeunt Ophelia and Hamlet]

                   Act II: Behind Hamlet's back.
                   Scene I: Romeo and Juliet's conversation.
[Enter Romeo and Juliet]
Romeo:
Speak your mind. You are as worried as the sum of yourself and the
difference between my small smooth hamster and my nose. Speak your
mind!
Juliet:
Speak YOUR mind! You are as bad as Hamlet! You are as small as the
difference between the square of the difference between my little pony
and your big hairy hound and the cube of your sorry little
codpiece. Speak your mind!
[Exit Romeo]
                   Scene II: Juliet and Ophelia's conversation.
[Enter Ophelia]
Juliet:
Thou art as good as the quotient between Romeo and the sum of a small
furry animal and a leech. Speak your mind!
Ophelia:
Thou art as disgusting as the quotient between Romeo and twice the
difference between a mistletoe and an oozing infected blister! Speak
your mind!
[Exeunt]</pre>

<p>And finally, FiM++ looks like an average letter to Grandma:
<pre class="language-plaintext"><code>Dear Princess Celestia:Hello World!

Today I learned how to say hello world!
I said "Hello, World!"!
That's all about how to say hello world.

Your faithful student, Kyli Rouge.</code></pre>

<p>(Other people, however, write their letters in LOLCODE.)
<pre class="language-plaintext"><code>HAI
CAN HAS STDIO?
VISIBLE "HAI WORLD!"
KTHXBYE</code></pre>]]></description>
            <link>http://hardmath123.github.io/hw.html</link>
            <guid isPermaLink="true">http://hardmath123.github.io/hw.html</guid>
            <dc:creator><![CDATA[Hardmath123]]></dc:creator>
            <pubDate>Wed, 27 Nov 2013 08:00:00 GMT</pubDate>
        </item>
    </channel>
</rss>